// Code generated by thriftgo (0.2.7). DO NOT EDIT.

package backendservice

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/agentservice"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/dorisexternalservice"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/palointernalservice"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/plannodes"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/status"
	"github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/types"
	"strings"
)

type TIngestBinlogStatus int64

const (
	TIngestBinlogStatus_ANALYSIS_ERROR TIngestBinlogStatus = 0
	TIngestBinlogStatus_UNKNOWN        TIngestBinlogStatus = 1
	TIngestBinlogStatus_NOT_FOUND      TIngestBinlogStatus = 2
	TIngestBinlogStatus_OK             TIngestBinlogStatus = 3
	TIngestBinlogStatus_FAILED         TIngestBinlogStatus = 4
	TIngestBinlogStatus_DOING          TIngestBinlogStatus = 5
)

func (p TIngestBinlogStatus) String() string {
	switch p {
	case TIngestBinlogStatus_ANALYSIS_ERROR:
		return "ANALYSIS_ERROR"
	case TIngestBinlogStatus_UNKNOWN:
		return "UNKNOWN"
	case TIngestBinlogStatus_NOT_FOUND:
		return "NOT_FOUND"
	case TIngestBinlogStatus_OK:
		return "OK"
	case TIngestBinlogStatus_FAILED:
		return "FAILED"
	case TIngestBinlogStatus_DOING:
		return "DOING"
	}
	return "<UNSET>"
}

func TIngestBinlogStatusFromString(s string) (TIngestBinlogStatus, error) {
	switch s {
	case "ANALYSIS_ERROR":
		return TIngestBinlogStatus_ANALYSIS_ERROR, nil
	case "UNKNOWN":
		return TIngestBinlogStatus_UNKNOWN, nil
	case "NOT_FOUND":
		return TIngestBinlogStatus_NOT_FOUND, nil
	case "OK":
		return TIngestBinlogStatus_OK, nil
	case "FAILED":
		return TIngestBinlogStatus_FAILED, nil
	case "DOING":
		return TIngestBinlogStatus_DOING, nil
	}
	return TIngestBinlogStatus(0), fmt.Errorf("not a valid TIngestBinlogStatus string")
}

func TIngestBinlogStatusPtr(v TIngestBinlogStatus) *TIngestBinlogStatus { return &v }
func (p *TIngestBinlogStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TIngestBinlogStatus(result.Int64)
	return
}

func (p *TIngestBinlogStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TTopicInfoType int64

const (
	TTopicInfoType_WORKLOAD_GROUP TTopicInfoType = 0
)

func (p TTopicInfoType) String() string {
	switch p {
	case TTopicInfoType_WORKLOAD_GROUP:
		return "WORKLOAD_GROUP"
	}
	return "<UNSET>"
}

func TTopicInfoTypeFromString(s string) (TTopicInfoType, error) {
	switch s {
	case "WORKLOAD_GROUP":
		return TTopicInfoType_WORKLOAD_GROUP, nil
	}
	return TTopicInfoType(0), fmt.Errorf("not a valid TTopicInfoType string")
}

func TTopicInfoTypePtr(v TTopicInfoType) *TTopicInfoType { return &v }
func (p *TTopicInfoType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TTopicInfoType(result.Int64)
	return
}

func (p *TTopicInfoType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TExportTaskRequest struct {
	Params *palointernalservice.TExecPlanFragmentParams `thrift:"params,1,required" frugal:"1,required,palointernalservice.TExecPlanFragmentParams" json:"params"`
}

func NewTExportTaskRequest() *TExportTaskRequest {
	return &TExportTaskRequest{}
}

func (p *TExportTaskRequest) InitDefault() {
	*p = TExportTaskRequest{}
}

var TExportTaskRequest_Params_DEFAULT *palointernalservice.TExecPlanFragmentParams

func (p *TExportTaskRequest) GetParams() (v *palointernalservice.TExecPlanFragmentParams) {
	if !p.IsSetParams() {
		return TExportTaskRequest_Params_DEFAULT
	}
	return p.Params
}
func (p *TExportTaskRequest) SetParams(val *palointernalservice.TExecPlanFragmentParams) {
	p.Params = val
}

var fieldIDToName_TExportTaskRequest = map[int16]string{
	1: "params",
}

func (p *TExportTaskRequest) IsSetParams() bool {
	return p.Params != nil
}

func (p *TExportTaskRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetParams bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetParams = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetParams {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TExportTaskRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TExportTaskRequest[fieldId]))
}

func (p *TExportTaskRequest) ReadField1(iprot thrift.TProtocol) error {
	p.Params = palointernalservice.NewTExecPlanFragmentParams()
	if err := p.Params.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TExportTaskRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TExportTaskRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TExportTaskRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TExportTaskRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExportTaskRequest(%+v)", *p)
}

func (p *TExportTaskRequest) DeepEqual(ano *TExportTaskRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *TExportTaskRequest) Field1DeepEqual(src *palointernalservice.TExecPlanFragmentParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type TTabletStat struct {
	TabletId       int64  `thrift:"tablet_id,1,required" frugal:"1,required,i64" json:"tablet_id"`
	DataSize       *int64 `thrift:"data_size,2,optional" frugal:"2,optional,i64" json:"data_size,omitempty"`
	RowNum         *int64 `thrift:"row_num,3,optional" frugal:"3,optional,i64" json:"row_num,omitempty"`
	VersionCount   *int64 `thrift:"version_count,4,optional" frugal:"4,optional,i64" json:"version_count,omitempty"`
	RemoteDataSize *int64 `thrift:"remote_data_size,5,optional" frugal:"5,optional,i64" json:"remote_data_size,omitempty"`
}

func NewTTabletStat() *TTabletStat {
	return &TTabletStat{}
}

func (p *TTabletStat) InitDefault() {
	*p = TTabletStat{}
}

func (p *TTabletStat) GetTabletId() (v int64) {
	return p.TabletId
}

var TTabletStat_DataSize_DEFAULT int64

func (p *TTabletStat) GetDataSize() (v int64) {
	if !p.IsSetDataSize() {
		return TTabletStat_DataSize_DEFAULT
	}
	return *p.DataSize
}

var TTabletStat_RowNum_DEFAULT int64

func (p *TTabletStat) GetRowNum() (v int64) {
	if !p.IsSetRowNum() {
		return TTabletStat_RowNum_DEFAULT
	}
	return *p.RowNum
}

var TTabletStat_VersionCount_DEFAULT int64

func (p *TTabletStat) GetVersionCount() (v int64) {
	if !p.IsSetVersionCount() {
		return TTabletStat_VersionCount_DEFAULT
	}
	return *p.VersionCount
}

var TTabletStat_RemoteDataSize_DEFAULT int64

func (p *TTabletStat) GetRemoteDataSize() (v int64) {
	if !p.IsSetRemoteDataSize() {
		return TTabletStat_RemoteDataSize_DEFAULT
	}
	return *p.RemoteDataSize
}
func (p *TTabletStat) SetTabletId(val int64) {
	p.TabletId = val
}
func (p *TTabletStat) SetDataSize(val *int64) {
	p.DataSize = val
}
func (p *TTabletStat) SetRowNum(val *int64) {
	p.RowNum = val
}
func (p *TTabletStat) SetVersionCount(val *int64) {
	p.VersionCount = val
}
func (p *TTabletStat) SetRemoteDataSize(val *int64) {
	p.RemoteDataSize = val
}

var fieldIDToName_TTabletStat = map[int16]string{
	1: "tablet_id",
	2: "data_size",
	3: "row_num",
	4: "version_count",
	5: "remote_data_size",
}

func (p *TTabletStat) IsSetDataSize() bool {
	return p.DataSize != nil
}

func (p *TTabletStat) IsSetRowNum() bool {
	return p.RowNum != nil
}

func (p *TTabletStat) IsSetVersionCount() bool {
	return p.VersionCount != nil
}

func (p *TTabletStat) IsSetRemoteDataSize() bool {
	return p.RemoteDataSize != nil
}

func (p *TTabletStat) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletStat[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletStat[fieldId]))
}

func (p *TTabletStat) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TabletId = v
	}
	return nil
}

func (p *TTabletStat) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.DataSize = &v
	}
	return nil
}

func (p *TTabletStat) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.RowNum = &v
	}
	return nil
}

func (p *TTabletStat) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.VersionCount = &v
	}
	return nil
}

func (p *TTabletStat) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.RemoteDataSize = &v
	}
	return nil
}

func (p *TTabletStat) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTabletStat"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTabletStat) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TabletId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTabletStat) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataSize() {
		if err = oprot.WriteFieldBegin("data_size", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DataSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTabletStat) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRowNum() {
		if err = oprot.WriteFieldBegin("row_num", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.RowNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TTabletStat) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionCount() {
		if err = oprot.WriteFieldBegin("version_count", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VersionCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TTabletStat) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteDataSize() {
		if err = oprot.WriteFieldBegin("remote_data_size", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.RemoteDataSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TTabletStat) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTabletStat(%+v)", *p)
}

func (p *TTabletStat) DeepEqual(ano *TTabletStat) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field2DeepEqual(ano.DataSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.RowNum) {
		return false
	}
	if !p.Field4DeepEqual(ano.VersionCount) {
		return false
	}
	if !p.Field5DeepEqual(ano.RemoteDataSize) {
		return false
	}
	return true
}

func (p *TTabletStat) Field1DeepEqual(src int64) bool {

	if p.TabletId != src {
		return false
	}
	return true
}
func (p *TTabletStat) Field2DeepEqual(src *int64) bool {

	if p.DataSize == src {
		return true
	} else if p.DataSize == nil || src == nil {
		return false
	}
	if *p.DataSize != *src {
		return false
	}
	return true
}
func (p *TTabletStat) Field3DeepEqual(src *int64) bool {

	if p.RowNum == src {
		return true
	} else if p.RowNum == nil || src == nil {
		return false
	}
	if *p.RowNum != *src {
		return false
	}
	return true
}
func (p *TTabletStat) Field4DeepEqual(src *int64) bool {

	if p.VersionCount == src {
		return true
	} else if p.VersionCount == nil || src == nil {
		return false
	}
	if *p.VersionCount != *src {
		return false
	}
	return true
}
func (p *TTabletStat) Field5DeepEqual(src *int64) bool {

	if p.RemoteDataSize == src {
		return true
	} else if p.RemoteDataSize == nil || src == nil {
		return false
	}
	if *p.RemoteDataSize != *src {
		return false
	}
	return true
}

type TTabletStatResult_ struct {
	TabletsStats   map[int64]*TTabletStat `thrift:"tablets_stats,1,required" frugal:"1,required,map<i64:TTabletStat>" json:"tablets_stats"`
	TabletStatList []*TTabletStat         `thrift:"tablet_stat_list,2,optional" frugal:"2,optional,list<TTabletStat>" json:"tablet_stat_list,omitempty"`
}

func NewTTabletStatResult_() *TTabletStatResult_ {
	return &TTabletStatResult_{}
}

func (p *TTabletStatResult_) InitDefault() {
	*p = TTabletStatResult_{}
}

func (p *TTabletStatResult_) GetTabletsStats() (v map[int64]*TTabletStat) {
	return p.TabletsStats
}

var TTabletStatResult__TabletStatList_DEFAULT []*TTabletStat

func (p *TTabletStatResult_) GetTabletStatList() (v []*TTabletStat) {
	if !p.IsSetTabletStatList() {
		return TTabletStatResult__TabletStatList_DEFAULT
	}
	return p.TabletStatList
}
func (p *TTabletStatResult_) SetTabletsStats(val map[int64]*TTabletStat) {
	p.TabletsStats = val
}
func (p *TTabletStatResult_) SetTabletStatList(val []*TTabletStat) {
	p.TabletStatList = val
}

var fieldIDToName_TTabletStatResult_ = map[int16]string{
	1: "tablets_stats",
	2: "tablet_stat_list",
}

func (p *TTabletStatResult_) IsSetTabletStatList() bool {
	return p.TabletStatList != nil
}

func (p *TTabletStatResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTabletsStats bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTabletsStats = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTabletsStats {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TTabletStatResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TTabletStatResult_[fieldId]))
}

func (p *TTabletStatResult_) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.TabletsStats = make(map[int64]*TTabletStat, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}
		_val := NewTTabletStat()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		p.TabletsStats[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TTabletStatResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.TabletStatList = make([]*TTabletStat, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTTabletStat()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.TabletStatList = append(p.TabletStatList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TTabletStatResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TTabletStatResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TTabletStatResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tablets_stats", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(p.TabletsStats)); err != nil {
		return err
	}
	for k, v := range p.TabletsStats {

		if err := oprot.WriteI64(k); err != nil {
			return err
		}

		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TTabletStatResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletStatList() {
		if err = oprot.WriteFieldBegin("tablet_stat_list", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TabletStatList)); err != nil {
			return err
		}
		for _, v := range p.TabletStatList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TTabletStatResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTabletStatResult_(%+v)", *p)
}

func (p *TTabletStatResult_) DeepEqual(ano *TTabletStatResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TabletsStats) {
		return false
	}
	if !p.Field2DeepEqual(ano.TabletStatList) {
		return false
	}
	return true
}

func (p *TTabletStatResult_) Field1DeepEqual(src map[int64]*TTabletStat) bool {

	if len(p.TabletsStats) != len(src) {
		return false
	}
	for k, v := range p.TabletsStats {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TTabletStatResult_) Field2DeepEqual(src []*TTabletStat) bool {

	if len(p.TabletStatList) != len(src) {
		return false
	}
	for i, v := range p.TabletStatList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TKafkaLoadInfo struct {
	Brokers              string            `thrift:"brokers,1,required" frugal:"1,required,string" json:"brokers"`
	Topic                string            `thrift:"topic,2,required" frugal:"2,required,string" json:"topic"`
	PartitionBeginOffset map[int32]int64   `thrift:"partition_begin_offset,3,required" frugal:"3,required,map<i32:i64>" json:"partition_begin_offset"`
	Properties           map[string]string `thrift:"properties,4,optional" frugal:"4,optional,map<string:string>" json:"properties,omitempty"`
}

func NewTKafkaLoadInfo() *TKafkaLoadInfo {
	return &TKafkaLoadInfo{}
}

func (p *TKafkaLoadInfo) InitDefault() {
	*p = TKafkaLoadInfo{}
}

func (p *TKafkaLoadInfo) GetBrokers() (v string) {
	return p.Brokers
}

func (p *TKafkaLoadInfo) GetTopic() (v string) {
	return p.Topic
}

func (p *TKafkaLoadInfo) GetPartitionBeginOffset() (v map[int32]int64) {
	return p.PartitionBeginOffset
}

var TKafkaLoadInfo_Properties_DEFAULT map[string]string

func (p *TKafkaLoadInfo) GetProperties() (v map[string]string) {
	if !p.IsSetProperties() {
		return TKafkaLoadInfo_Properties_DEFAULT
	}
	return p.Properties
}
func (p *TKafkaLoadInfo) SetBrokers(val string) {
	p.Brokers = val
}
func (p *TKafkaLoadInfo) SetTopic(val string) {
	p.Topic = val
}
func (p *TKafkaLoadInfo) SetPartitionBeginOffset(val map[int32]int64) {
	p.PartitionBeginOffset = val
}
func (p *TKafkaLoadInfo) SetProperties(val map[string]string) {
	p.Properties = val
}

var fieldIDToName_TKafkaLoadInfo = map[int16]string{
	1: "brokers",
	2: "topic",
	3: "partition_begin_offset",
	4: "properties",
}

func (p *TKafkaLoadInfo) IsSetProperties() bool {
	return p.Properties != nil
}

func (p *TKafkaLoadInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBrokers bool = false
	var issetTopic bool = false
	var issetPartitionBeginOffset bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBrokers = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTopic = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPartitionBeginOffset = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBrokers {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTopic {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPartitionBeginOffset {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TKafkaLoadInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TKafkaLoadInfo[fieldId]))
}

func (p *TKafkaLoadInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Brokers = v
	}
	return nil
}

func (p *TKafkaLoadInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Topic = v
	}
	return nil
}

func (p *TKafkaLoadInfo) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.PartitionBeginOffset = make(map[int32]int64, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		p.PartitionBeginOffset[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TKafkaLoadInfo) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Properties = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Properties[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TKafkaLoadInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TKafkaLoadInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TKafkaLoadInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("brokers", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Brokers); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TKafkaLoadInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("topic", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Topic); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TKafkaLoadInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("partition_begin_offset", thrift.MAP, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(p.PartitionBeginOffset)); err != nil {
		return err
	}
	for k, v := range p.PartitionBeginOffset {

		if err := oprot.WriteI32(k); err != nil {
			return err
		}

		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TKafkaLoadInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperties() {
		if err = oprot.WriteFieldBegin("properties", thrift.MAP, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
			return err
		}
		for k, v := range p.Properties {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TKafkaLoadInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TKafkaLoadInfo(%+v)", *p)
}

func (p *TKafkaLoadInfo) DeepEqual(ano *TKafkaLoadInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Brokers) {
		return false
	}
	if !p.Field2DeepEqual(ano.Topic) {
		return false
	}
	if !p.Field3DeepEqual(ano.PartitionBeginOffset) {
		return false
	}
	if !p.Field4DeepEqual(ano.Properties) {
		return false
	}
	return true
}

func (p *TKafkaLoadInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Brokers, src) != 0 {
		return false
	}
	return true
}
func (p *TKafkaLoadInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Topic, src) != 0 {
		return false
	}
	return true
}
func (p *TKafkaLoadInfo) Field3DeepEqual(src map[int32]int64) bool {

	if len(p.PartitionBeginOffset) != len(src) {
		return false
	}
	for k, v := range p.PartitionBeginOffset {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TKafkaLoadInfo) Field4DeepEqual(src map[string]string) bool {

	if len(p.Properties) != len(src) {
		return false
	}
	for k, v := range p.Properties {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type TRoutineLoadTask struct {
	Type           types.TLoadSourceType                        `thrift:"type,1,required" frugal:"1,required,TLoadSourceType" json:"type"`
	JobId          int64                                        `thrift:"job_id,2,required" frugal:"2,required,i64" json:"job_id"`
	Id             *types.TUniqueId                             `thrift:"id,3,required" frugal:"3,required,types.TUniqueId" json:"id"`
	TxnId          int64                                        `thrift:"txn_id,4,required" frugal:"4,required,i64" json:"txn_id"`
	AuthCode       int64                                        `thrift:"auth_code,5,required" frugal:"5,required,i64" json:"auth_code"`
	Db             *string                                      `thrift:"db,6,optional" frugal:"6,optional,string" json:"db,omitempty"`
	Tbl            *string                                      `thrift:"tbl,7,optional" frugal:"7,optional,string" json:"tbl,omitempty"`
	Label          *string                                      `thrift:"label,8,optional" frugal:"8,optional,string" json:"label,omitempty"`
	MaxIntervalS   *int64                                       `thrift:"max_interval_s,9,optional" frugal:"9,optional,i64" json:"max_interval_s,omitempty"`
	MaxBatchRows   *int64                                       `thrift:"max_batch_rows,10,optional" frugal:"10,optional,i64" json:"max_batch_rows,omitempty"`
	MaxBatchSize   *int64                                       `thrift:"max_batch_size,11,optional" frugal:"11,optional,i64" json:"max_batch_size,omitempty"`
	KafkaLoadInfo  *TKafkaLoadInfo                              `thrift:"kafka_load_info,12,optional" frugal:"12,optional,TKafkaLoadInfo" json:"kafka_load_info,omitempty"`
	Params         *palointernalservice.TExecPlanFragmentParams `thrift:"params,13,optional" frugal:"13,optional,palointernalservice.TExecPlanFragmentParams" json:"params,omitempty"`
	Format         *plannodes.TFileFormatType                   `thrift:"format,14,optional" frugal:"14,optional,TFileFormatType" json:"format,omitempty"`
	PipelineParams *palointernalservice.TPipelineFragmentParams `thrift:"pipeline_params,15,optional" frugal:"15,optional,palointernalservice.TPipelineFragmentParams" json:"pipeline_params,omitempty"`
	IsMultiTable   *bool                                        `thrift:"is_multi_table,16,optional" frugal:"16,optional,bool" json:"is_multi_table,omitempty"`
}

func NewTRoutineLoadTask() *TRoutineLoadTask {
	return &TRoutineLoadTask{}
}

func (p *TRoutineLoadTask) InitDefault() {
	*p = TRoutineLoadTask{}
}

func (p *TRoutineLoadTask) GetType() (v types.TLoadSourceType) {
	return p.Type
}

func (p *TRoutineLoadTask) GetJobId() (v int64) {
	return p.JobId
}

var TRoutineLoadTask_Id_DEFAULT *types.TUniqueId

func (p *TRoutineLoadTask) GetId() (v *types.TUniqueId) {
	if !p.IsSetId() {
		return TRoutineLoadTask_Id_DEFAULT
	}
	return p.Id
}

func (p *TRoutineLoadTask) GetTxnId() (v int64) {
	return p.TxnId
}

func (p *TRoutineLoadTask) GetAuthCode() (v int64) {
	return p.AuthCode
}

var TRoutineLoadTask_Db_DEFAULT string

func (p *TRoutineLoadTask) GetDb() (v string) {
	if !p.IsSetDb() {
		return TRoutineLoadTask_Db_DEFAULT
	}
	return *p.Db
}

var TRoutineLoadTask_Tbl_DEFAULT string

func (p *TRoutineLoadTask) GetTbl() (v string) {
	if !p.IsSetTbl() {
		return TRoutineLoadTask_Tbl_DEFAULT
	}
	return *p.Tbl
}

var TRoutineLoadTask_Label_DEFAULT string

func (p *TRoutineLoadTask) GetLabel() (v string) {
	if !p.IsSetLabel() {
		return TRoutineLoadTask_Label_DEFAULT
	}
	return *p.Label
}

var TRoutineLoadTask_MaxIntervalS_DEFAULT int64

func (p *TRoutineLoadTask) GetMaxIntervalS() (v int64) {
	if !p.IsSetMaxIntervalS() {
		return TRoutineLoadTask_MaxIntervalS_DEFAULT
	}
	return *p.MaxIntervalS
}

var TRoutineLoadTask_MaxBatchRows_DEFAULT int64

func (p *TRoutineLoadTask) GetMaxBatchRows() (v int64) {
	if !p.IsSetMaxBatchRows() {
		return TRoutineLoadTask_MaxBatchRows_DEFAULT
	}
	return *p.MaxBatchRows
}

var TRoutineLoadTask_MaxBatchSize_DEFAULT int64

func (p *TRoutineLoadTask) GetMaxBatchSize() (v int64) {
	if !p.IsSetMaxBatchSize() {
		return TRoutineLoadTask_MaxBatchSize_DEFAULT
	}
	return *p.MaxBatchSize
}

var TRoutineLoadTask_KafkaLoadInfo_DEFAULT *TKafkaLoadInfo

func (p *TRoutineLoadTask) GetKafkaLoadInfo() (v *TKafkaLoadInfo) {
	if !p.IsSetKafkaLoadInfo() {
		return TRoutineLoadTask_KafkaLoadInfo_DEFAULT
	}
	return p.KafkaLoadInfo
}

var TRoutineLoadTask_Params_DEFAULT *palointernalservice.TExecPlanFragmentParams

func (p *TRoutineLoadTask) GetParams() (v *palointernalservice.TExecPlanFragmentParams) {
	if !p.IsSetParams() {
		return TRoutineLoadTask_Params_DEFAULT
	}
	return p.Params
}

var TRoutineLoadTask_Format_DEFAULT plannodes.TFileFormatType

func (p *TRoutineLoadTask) GetFormat() (v plannodes.TFileFormatType) {
	if !p.IsSetFormat() {
		return TRoutineLoadTask_Format_DEFAULT
	}
	return *p.Format
}

var TRoutineLoadTask_PipelineParams_DEFAULT *palointernalservice.TPipelineFragmentParams

func (p *TRoutineLoadTask) GetPipelineParams() (v *palointernalservice.TPipelineFragmentParams) {
	if !p.IsSetPipelineParams() {
		return TRoutineLoadTask_PipelineParams_DEFAULT
	}
	return p.PipelineParams
}

var TRoutineLoadTask_IsMultiTable_DEFAULT bool

func (p *TRoutineLoadTask) GetIsMultiTable() (v bool) {
	if !p.IsSetIsMultiTable() {
		return TRoutineLoadTask_IsMultiTable_DEFAULT
	}
	return *p.IsMultiTable
}
func (p *TRoutineLoadTask) SetType(val types.TLoadSourceType) {
	p.Type = val
}
func (p *TRoutineLoadTask) SetJobId(val int64) {
	p.JobId = val
}
func (p *TRoutineLoadTask) SetId(val *types.TUniqueId) {
	p.Id = val
}
func (p *TRoutineLoadTask) SetTxnId(val int64) {
	p.TxnId = val
}
func (p *TRoutineLoadTask) SetAuthCode(val int64) {
	p.AuthCode = val
}
func (p *TRoutineLoadTask) SetDb(val *string) {
	p.Db = val
}
func (p *TRoutineLoadTask) SetTbl(val *string) {
	p.Tbl = val
}
func (p *TRoutineLoadTask) SetLabel(val *string) {
	p.Label = val
}
func (p *TRoutineLoadTask) SetMaxIntervalS(val *int64) {
	p.MaxIntervalS = val
}
func (p *TRoutineLoadTask) SetMaxBatchRows(val *int64) {
	p.MaxBatchRows = val
}
func (p *TRoutineLoadTask) SetMaxBatchSize(val *int64) {
	p.MaxBatchSize = val
}
func (p *TRoutineLoadTask) SetKafkaLoadInfo(val *TKafkaLoadInfo) {
	p.KafkaLoadInfo = val
}
func (p *TRoutineLoadTask) SetParams(val *palointernalservice.TExecPlanFragmentParams) {
	p.Params = val
}
func (p *TRoutineLoadTask) SetFormat(val *plannodes.TFileFormatType) {
	p.Format = val
}
func (p *TRoutineLoadTask) SetPipelineParams(val *palointernalservice.TPipelineFragmentParams) {
	p.PipelineParams = val
}
func (p *TRoutineLoadTask) SetIsMultiTable(val *bool) {
	p.IsMultiTable = val
}

var fieldIDToName_TRoutineLoadTask = map[int16]string{
	1:  "type",
	2:  "job_id",
	3:  "id",
	4:  "txn_id",
	5:  "auth_code",
	6:  "db",
	7:  "tbl",
	8:  "label",
	9:  "max_interval_s",
	10: "max_batch_rows",
	11: "max_batch_size",
	12: "kafka_load_info",
	13: "params",
	14: "format",
	15: "pipeline_params",
	16: "is_multi_table",
}

func (p *TRoutineLoadTask) IsSetId() bool {
	return p.Id != nil
}

func (p *TRoutineLoadTask) IsSetDb() bool {
	return p.Db != nil
}

func (p *TRoutineLoadTask) IsSetTbl() bool {
	return p.Tbl != nil
}

func (p *TRoutineLoadTask) IsSetLabel() bool {
	return p.Label != nil
}

func (p *TRoutineLoadTask) IsSetMaxIntervalS() bool {
	return p.MaxIntervalS != nil
}

func (p *TRoutineLoadTask) IsSetMaxBatchRows() bool {
	return p.MaxBatchRows != nil
}

func (p *TRoutineLoadTask) IsSetMaxBatchSize() bool {
	return p.MaxBatchSize != nil
}

func (p *TRoutineLoadTask) IsSetKafkaLoadInfo() bool {
	return p.KafkaLoadInfo != nil
}

func (p *TRoutineLoadTask) IsSetParams() bool {
	return p.Params != nil
}

func (p *TRoutineLoadTask) IsSetFormat() bool {
	return p.Format != nil
}

func (p *TRoutineLoadTask) IsSetPipelineParams() bool {
	return p.PipelineParams != nil
}

func (p *TRoutineLoadTask) IsSetIsMultiTable() bool {
	return p.IsMultiTable != nil
}

func (p *TRoutineLoadTask) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false
	var issetJobId bool = false
	var issetId bool = false
	var issetTxnId bool = false
	var issetAuthCode bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetJobId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetTxnId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetAuthCode = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetJobId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetId {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetTxnId {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetAuthCode {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TRoutineLoadTask[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TRoutineLoadTask[fieldId]))
}

func (p *TRoutineLoadTask) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Type = types.TLoadSourceType(v)
	}
	return nil
}

func (p *TRoutineLoadTask) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.JobId = v
	}
	return nil
}

func (p *TRoutineLoadTask) ReadField3(iprot thrift.TProtocol) error {
	p.Id = types.NewTUniqueId()
	if err := p.Id.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TRoutineLoadTask) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TxnId = v
	}
	return nil
}

func (p *TRoutineLoadTask) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.AuthCode = v
	}
	return nil
}

func (p *TRoutineLoadTask) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Db = &v
	}
	return nil
}

func (p *TRoutineLoadTask) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Tbl = &v
	}
	return nil
}

func (p *TRoutineLoadTask) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Label = &v
	}
	return nil
}

func (p *TRoutineLoadTask) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.MaxIntervalS = &v
	}
	return nil
}

func (p *TRoutineLoadTask) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.MaxBatchRows = &v
	}
	return nil
}

func (p *TRoutineLoadTask) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.MaxBatchSize = &v
	}
	return nil
}

func (p *TRoutineLoadTask) ReadField12(iprot thrift.TProtocol) error {
	p.KafkaLoadInfo = NewTKafkaLoadInfo()
	if err := p.KafkaLoadInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TRoutineLoadTask) ReadField13(iprot thrift.TProtocol) error {
	p.Params = palointernalservice.NewTExecPlanFragmentParams()
	if err := p.Params.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TRoutineLoadTask) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := plannodes.TFileFormatType(v)
		p.Format = &tmp
	}
	return nil
}

func (p *TRoutineLoadTask) ReadField15(iprot thrift.TProtocol) error {
	p.PipelineParams = palointernalservice.NewTPipelineFragmentParams()
	if err := p.PipelineParams.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TRoutineLoadTask) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsMultiTable = &v
	}
	return nil
}

func (p *TRoutineLoadTask) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TRoutineLoadTask"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TRoutineLoadTask) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TRoutineLoadTask) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("job_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.JobId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TRoutineLoadTask) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Id.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TRoutineLoadTask) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("txn_id", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TxnId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TRoutineLoadTask) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("auth_code", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.AuthCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TRoutineLoadTask) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDb() {
		if err = oprot.WriteFieldBegin("db", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Db); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TRoutineLoadTask) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTbl() {
		if err = oprot.WriteFieldBegin("tbl", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Tbl); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TRoutineLoadTask) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabel() {
		if err = oprot.WriteFieldBegin("label", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Label); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TRoutineLoadTask) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxIntervalS() {
		if err = oprot.WriteFieldBegin("max_interval_s", thrift.I64, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxIntervalS); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TRoutineLoadTask) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxBatchRows() {
		if err = oprot.WriteFieldBegin("max_batch_rows", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxBatchRows); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TRoutineLoadTask) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxBatchSize() {
		if err = oprot.WriteFieldBegin("max_batch_size", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxBatchSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TRoutineLoadTask) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetKafkaLoadInfo() {
		if err = oprot.WriteFieldBegin("kafka_load_info", thrift.STRUCT, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.KafkaLoadInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TRoutineLoadTask) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetParams() {
		if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Params.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TRoutineLoadTask) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetFormat() {
		if err = oprot.WriteFieldBegin("format", thrift.I32, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Format)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TRoutineLoadTask) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetPipelineParams() {
		if err = oprot.WriteFieldBegin("pipeline_params", thrift.STRUCT, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PipelineParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TRoutineLoadTask) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsMultiTable() {
		if err = oprot.WriteFieldBegin("is_multi_table", thrift.BOOL, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsMultiTable); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TRoutineLoadTask) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRoutineLoadTask(%+v)", *p)
}

func (p *TRoutineLoadTask) DeepEqual(ano *TRoutineLoadTask) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.JobId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Id) {
		return false
	}
	if !p.Field4DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field5DeepEqual(ano.AuthCode) {
		return false
	}
	if !p.Field6DeepEqual(ano.Db) {
		return false
	}
	if !p.Field7DeepEqual(ano.Tbl) {
		return false
	}
	if !p.Field8DeepEqual(ano.Label) {
		return false
	}
	if !p.Field9DeepEqual(ano.MaxIntervalS) {
		return false
	}
	if !p.Field10DeepEqual(ano.MaxBatchRows) {
		return false
	}
	if !p.Field11DeepEqual(ano.MaxBatchSize) {
		return false
	}
	if !p.Field12DeepEqual(ano.KafkaLoadInfo) {
		return false
	}
	if !p.Field13DeepEqual(ano.Params) {
		return false
	}
	if !p.Field14DeepEqual(ano.Format) {
		return false
	}
	if !p.Field15DeepEqual(ano.PipelineParams) {
		return false
	}
	if !p.Field16DeepEqual(ano.IsMultiTable) {
		return false
	}
	return true
}

func (p *TRoutineLoadTask) Field1DeepEqual(src types.TLoadSourceType) bool {

	if p.Type != src {
		return false
	}
	return true
}
func (p *TRoutineLoadTask) Field2DeepEqual(src int64) bool {

	if p.JobId != src {
		return false
	}
	return true
}
func (p *TRoutineLoadTask) Field3DeepEqual(src *types.TUniqueId) bool {

	if !p.Id.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TRoutineLoadTask) Field4DeepEqual(src int64) bool {

	if p.TxnId != src {
		return false
	}
	return true
}
func (p *TRoutineLoadTask) Field5DeepEqual(src int64) bool {

	if p.AuthCode != src {
		return false
	}
	return true
}
func (p *TRoutineLoadTask) Field6DeepEqual(src *string) bool {

	if p.Db == src {
		return true
	} else if p.Db == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Db, *src) != 0 {
		return false
	}
	return true
}
func (p *TRoutineLoadTask) Field7DeepEqual(src *string) bool {

	if p.Tbl == src {
		return true
	} else if p.Tbl == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Tbl, *src) != 0 {
		return false
	}
	return true
}
func (p *TRoutineLoadTask) Field8DeepEqual(src *string) bool {

	if p.Label == src {
		return true
	} else if p.Label == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Label, *src) != 0 {
		return false
	}
	return true
}
func (p *TRoutineLoadTask) Field9DeepEqual(src *int64) bool {

	if p.MaxIntervalS == src {
		return true
	} else if p.MaxIntervalS == nil || src == nil {
		return false
	}
	if *p.MaxIntervalS != *src {
		return false
	}
	return true
}
func (p *TRoutineLoadTask) Field10DeepEqual(src *int64) bool {

	if p.MaxBatchRows == src {
		return true
	} else if p.MaxBatchRows == nil || src == nil {
		return false
	}
	if *p.MaxBatchRows != *src {
		return false
	}
	return true
}
func (p *TRoutineLoadTask) Field11DeepEqual(src *int64) bool {

	if p.MaxBatchSize == src {
		return true
	} else if p.MaxBatchSize == nil || src == nil {
		return false
	}
	if *p.MaxBatchSize != *src {
		return false
	}
	return true
}
func (p *TRoutineLoadTask) Field12DeepEqual(src *TKafkaLoadInfo) bool {

	if !p.KafkaLoadInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TRoutineLoadTask) Field13DeepEqual(src *palointernalservice.TExecPlanFragmentParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TRoutineLoadTask) Field14DeepEqual(src *plannodes.TFileFormatType) bool {

	if p.Format == src {
		return true
	} else if p.Format == nil || src == nil {
		return false
	}
	if *p.Format != *src {
		return false
	}
	return true
}
func (p *TRoutineLoadTask) Field15DeepEqual(src *palointernalservice.TPipelineFragmentParams) bool {

	if !p.PipelineParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TRoutineLoadTask) Field16DeepEqual(src *bool) bool {

	if p.IsMultiTable == src {
		return true
	} else if p.IsMultiTable == nil || src == nil {
		return false
	}
	if *p.IsMultiTable != *src {
		return false
	}
	return true
}

type TKafkaMetaProxyRequest struct {
	KafkaInfo *TKafkaLoadInfo `thrift:"kafka_info,1,optional" frugal:"1,optional,TKafkaLoadInfo" json:"kafka_info,omitempty"`
}

func NewTKafkaMetaProxyRequest() *TKafkaMetaProxyRequest {
	return &TKafkaMetaProxyRequest{}
}

func (p *TKafkaMetaProxyRequest) InitDefault() {
	*p = TKafkaMetaProxyRequest{}
}

var TKafkaMetaProxyRequest_KafkaInfo_DEFAULT *TKafkaLoadInfo

func (p *TKafkaMetaProxyRequest) GetKafkaInfo() (v *TKafkaLoadInfo) {
	if !p.IsSetKafkaInfo() {
		return TKafkaMetaProxyRequest_KafkaInfo_DEFAULT
	}
	return p.KafkaInfo
}
func (p *TKafkaMetaProxyRequest) SetKafkaInfo(val *TKafkaLoadInfo) {
	p.KafkaInfo = val
}

var fieldIDToName_TKafkaMetaProxyRequest = map[int16]string{
	1: "kafka_info",
}

func (p *TKafkaMetaProxyRequest) IsSetKafkaInfo() bool {
	return p.KafkaInfo != nil
}

func (p *TKafkaMetaProxyRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TKafkaMetaProxyRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TKafkaMetaProxyRequest) ReadField1(iprot thrift.TProtocol) error {
	p.KafkaInfo = NewTKafkaLoadInfo()
	if err := p.KafkaInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TKafkaMetaProxyRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TKafkaMetaProxyRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TKafkaMetaProxyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKafkaInfo() {
		if err = oprot.WriteFieldBegin("kafka_info", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.KafkaInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TKafkaMetaProxyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TKafkaMetaProxyRequest(%+v)", *p)
}

func (p *TKafkaMetaProxyRequest) DeepEqual(ano *TKafkaMetaProxyRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.KafkaInfo) {
		return false
	}
	return true
}

func (p *TKafkaMetaProxyRequest) Field1DeepEqual(src *TKafkaLoadInfo) bool {

	if !p.KafkaInfo.DeepEqual(src) {
		return false
	}
	return true
}

type TKafkaMetaProxyResult_ struct {
	PartitionIds []int32 `thrift:"partition_ids,1,optional" frugal:"1,optional,list<i32>" json:"partition_ids,omitempty"`
}

func NewTKafkaMetaProxyResult_() *TKafkaMetaProxyResult_ {
	return &TKafkaMetaProxyResult_{}
}

func (p *TKafkaMetaProxyResult_) InitDefault() {
	*p = TKafkaMetaProxyResult_{}
}

var TKafkaMetaProxyResult__PartitionIds_DEFAULT []int32

func (p *TKafkaMetaProxyResult_) GetPartitionIds() (v []int32) {
	if !p.IsSetPartitionIds() {
		return TKafkaMetaProxyResult__PartitionIds_DEFAULT
	}
	return p.PartitionIds
}
func (p *TKafkaMetaProxyResult_) SetPartitionIds(val []int32) {
	p.PartitionIds = val
}

var fieldIDToName_TKafkaMetaProxyResult_ = map[int16]string{
	1: "partition_ids",
}

func (p *TKafkaMetaProxyResult_) IsSetPartitionIds() bool {
	return p.PartitionIds != nil
}

func (p *TKafkaMetaProxyResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TKafkaMetaProxyResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TKafkaMetaProxyResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PartitionIds = make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.PartitionIds = append(p.PartitionIds, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TKafkaMetaProxyResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TKafkaMetaProxyResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TKafkaMetaProxyResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionIds() {
		if err = oprot.WriteFieldBegin("partition_ids", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.PartitionIds)); err != nil {
			return err
		}
		for _, v := range p.PartitionIds {
			if err := oprot.WriteI32(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TKafkaMetaProxyResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TKafkaMetaProxyResult_(%+v)", *p)
}

func (p *TKafkaMetaProxyResult_) DeepEqual(ano *TKafkaMetaProxyResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PartitionIds) {
		return false
	}
	return true
}

func (p *TKafkaMetaProxyResult_) Field1DeepEqual(src []int32) bool {

	if len(p.PartitionIds) != len(src) {
		return false
	}
	for i, v := range p.PartitionIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type TProxyRequest struct {
	KafkaMetaRequest *TKafkaMetaProxyRequest `thrift:"kafka_meta_request,1,optional" frugal:"1,optional,TKafkaMetaProxyRequest" json:"kafka_meta_request,omitempty"`
}

func NewTProxyRequest() *TProxyRequest {
	return &TProxyRequest{}
}

func (p *TProxyRequest) InitDefault() {
	*p = TProxyRequest{}
}

var TProxyRequest_KafkaMetaRequest_DEFAULT *TKafkaMetaProxyRequest

func (p *TProxyRequest) GetKafkaMetaRequest() (v *TKafkaMetaProxyRequest) {
	if !p.IsSetKafkaMetaRequest() {
		return TProxyRequest_KafkaMetaRequest_DEFAULT
	}
	return p.KafkaMetaRequest
}
func (p *TProxyRequest) SetKafkaMetaRequest(val *TKafkaMetaProxyRequest) {
	p.KafkaMetaRequest = val
}

var fieldIDToName_TProxyRequest = map[int16]string{
	1: "kafka_meta_request",
}

func (p *TProxyRequest) IsSetKafkaMetaRequest() bool {
	return p.KafkaMetaRequest != nil
}

func (p *TProxyRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TProxyRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TProxyRequest) ReadField1(iprot thrift.TProtocol) error {
	p.KafkaMetaRequest = NewTKafkaMetaProxyRequest()
	if err := p.KafkaMetaRequest.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TProxyRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TProxyRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TProxyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKafkaMetaRequest() {
		if err = oprot.WriteFieldBegin("kafka_meta_request", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.KafkaMetaRequest.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TProxyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TProxyRequest(%+v)", *p)
}

func (p *TProxyRequest) DeepEqual(ano *TProxyRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.KafkaMetaRequest) {
		return false
	}
	return true
}

func (p *TProxyRequest) Field1DeepEqual(src *TKafkaMetaProxyRequest) bool {

	if !p.KafkaMetaRequest.DeepEqual(src) {
		return false
	}
	return true
}

type TProxyResult_ struct {
	Status           *status.TStatus         `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
	KafkaMetaResult_ *TKafkaMetaProxyResult_ `thrift:"kafka_meta_result,2,optional" frugal:"2,optional,TKafkaMetaProxyResult_" json:"kafka_meta_result,omitempty"`
}

func NewTProxyResult_() *TProxyResult_ {
	return &TProxyResult_{}
}

func (p *TProxyResult_) InitDefault() {
	*p = TProxyResult_{}
}

var TProxyResult__Status_DEFAULT *status.TStatus

func (p *TProxyResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TProxyResult__Status_DEFAULT
	}
	return p.Status
}

var TProxyResult__KafkaMetaResult__DEFAULT *TKafkaMetaProxyResult_

func (p *TProxyResult_) GetKafkaMetaResult_() (v *TKafkaMetaProxyResult_) {
	if !p.IsSetKafkaMetaResult_() {
		return TProxyResult__KafkaMetaResult__DEFAULT
	}
	return p.KafkaMetaResult_
}
func (p *TProxyResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TProxyResult_) SetKafkaMetaResult_(val *TKafkaMetaProxyResult_) {
	p.KafkaMetaResult_ = val
}

var fieldIDToName_TProxyResult_ = map[int16]string{
	1: "status",
	2: "kafka_meta_result",
}

func (p *TProxyResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TProxyResult_) IsSetKafkaMetaResult_() bool {
	return p.KafkaMetaResult_ != nil
}

func (p *TProxyResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TProxyResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TProxyResult_[fieldId]))
}

func (p *TProxyResult_) ReadField1(iprot thrift.TProtocol) error {
	p.Status = status.NewTStatus()
	if err := p.Status.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TProxyResult_) ReadField2(iprot thrift.TProtocol) error {
	p.KafkaMetaResult_ = NewTKafkaMetaProxyResult_()
	if err := p.KafkaMetaResult_.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TProxyResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TProxyResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TProxyResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TProxyResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetKafkaMetaResult_() {
		if err = oprot.WriteFieldBegin("kafka_meta_result", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.KafkaMetaResult_.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TProxyResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TProxyResult_(%+v)", *p)
}

func (p *TProxyResult_) DeepEqual(ano *TProxyResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.KafkaMetaResult_) {
		return false
	}
	return true
}

func (p *TProxyResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TProxyResult_) Field2DeepEqual(src *TKafkaMetaProxyResult_) bool {

	if !p.KafkaMetaResult_.DeepEqual(src) {
		return false
	}
	return true
}

type TStreamLoadRecord struct {
	Cluster        *string `thrift:"cluster,1,optional" frugal:"1,optional,string" json:"cluster,omitempty"`
	User           string  `thrift:"user,2,required" frugal:"2,required,string" json:"user"`
	Passwd         string  `thrift:"passwd,3,required" frugal:"3,required,string" json:"passwd"`
	Db             string  `thrift:"db,4,required" frugal:"4,required,string" json:"db"`
	Tbl            string  `thrift:"tbl,5,required" frugal:"5,required,string" json:"tbl"`
	UserIp         *string `thrift:"user_ip,6,optional" frugal:"6,optional,string" json:"user_ip,omitempty"`
	Label          string  `thrift:"label,7,required" frugal:"7,required,string" json:"label"`
	Status         string  `thrift:"status,8,required" frugal:"8,required,string" json:"status"`
	Message        string  `thrift:"message,9,required" frugal:"9,required,string" json:"message"`
	Url            *string `thrift:"url,10,optional" frugal:"10,optional,string" json:"url,omitempty"`
	AuthCode       *int64  `thrift:"auth_code,11,optional" frugal:"11,optional,i64" json:"auth_code,omitempty"`
	TotalRows      int64   `thrift:"total_rows,12,required" frugal:"12,required,i64" json:"total_rows"`
	LoadedRows     int64   `thrift:"loaded_rows,13,required" frugal:"13,required,i64" json:"loaded_rows"`
	FilteredRows   int64   `thrift:"filtered_rows,14,required" frugal:"14,required,i64" json:"filtered_rows"`
	UnselectedRows int64   `thrift:"unselected_rows,15,required" frugal:"15,required,i64" json:"unselected_rows"`
	LoadBytes      int64   `thrift:"load_bytes,16,required" frugal:"16,required,i64" json:"load_bytes"`
	StartTime      int64   `thrift:"start_time,17,required" frugal:"17,required,i64" json:"start_time"`
	FinishTime     int64   `thrift:"finish_time,18,required" frugal:"18,required,i64" json:"finish_time"`
	Comment        *string `thrift:"comment,19,optional" frugal:"19,optional,string" json:"comment,omitempty"`
}

func NewTStreamLoadRecord() *TStreamLoadRecord {
	return &TStreamLoadRecord{}
}

func (p *TStreamLoadRecord) InitDefault() {
	*p = TStreamLoadRecord{}
}

var TStreamLoadRecord_Cluster_DEFAULT string

func (p *TStreamLoadRecord) GetCluster() (v string) {
	if !p.IsSetCluster() {
		return TStreamLoadRecord_Cluster_DEFAULT
	}
	return *p.Cluster
}

func (p *TStreamLoadRecord) GetUser() (v string) {
	return p.User
}

func (p *TStreamLoadRecord) GetPasswd() (v string) {
	return p.Passwd
}

func (p *TStreamLoadRecord) GetDb() (v string) {
	return p.Db
}

func (p *TStreamLoadRecord) GetTbl() (v string) {
	return p.Tbl
}

var TStreamLoadRecord_UserIp_DEFAULT string

func (p *TStreamLoadRecord) GetUserIp() (v string) {
	if !p.IsSetUserIp() {
		return TStreamLoadRecord_UserIp_DEFAULT
	}
	return *p.UserIp
}

func (p *TStreamLoadRecord) GetLabel() (v string) {
	return p.Label
}

func (p *TStreamLoadRecord) GetStatus() (v string) {
	return p.Status
}

func (p *TStreamLoadRecord) GetMessage() (v string) {
	return p.Message
}

var TStreamLoadRecord_Url_DEFAULT string

func (p *TStreamLoadRecord) GetUrl() (v string) {
	if !p.IsSetUrl() {
		return TStreamLoadRecord_Url_DEFAULT
	}
	return *p.Url
}

var TStreamLoadRecord_AuthCode_DEFAULT int64

func (p *TStreamLoadRecord) GetAuthCode() (v int64) {
	if !p.IsSetAuthCode() {
		return TStreamLoadRecord_AuthCode_DEFAULT
	}
	return *p.AuthCode
}

func (p *TStreamLoadRecord) GetTotalRows() (v int64) {
	return p.TotalRows
}

func (p *TStreamLoadRecord) GetLoadedRows() (v int64) {
	return p.LoadedRows
}

func (p *TStreamLoadRecord) GetFilteredRows() (v int64) {
	return p.FilteredRows
}

func (p *TStreamLoadRecord) GetUnselectedRows() (v int64) {
	return p.UnselectedRows
}

func (p *TStreamLoadRecord) GetLoadBytes() (v int64) {
	return p.LoadBytes
}

func (p *TStreamLoadRecord) GetStartTime() (v int64) {
	return p.StartTime
}

func (p *TStreamLoadRecord) GetFinishTime() (v int64) {
	return p.FinishTime
}

var TStreamLoadRecord_Comment_DEFAULT string

func (p *TStreamLoadRecord) GetComment() (v string) {
	if !p.IsSetComment() {
		return TStreamLoadRecord_Comment_DEFAULT
	}
	return *p.Comment
}
func (p *TStreamLoadRecord) SetCluster(val *string) {
	p.Cluster = val
}
func (p *TStreamLoadRecord) SetUser(val string) {
	p.User = val
}
func (p *TStreamLoadRecord) SetPasswd(val string) {
	p.Passwd = val
}
func (p *TStreamLoadRecord) SetDb(val string) {
	p.Db = val
}
func (p *TStreamLoadRecord) SetTbl(val string) {
	p.Tbl = val
}
func (p *TStreamLoadRecord) SetUserIp(val *string) {
	p.UserIp = val
}
func (p *TStreamLoadRecord) SetLabel(val string) {
	p.Label = val
}
func (p *TStreamLoadRecord) SetStatus(val string) {
	p.Status = val
}
func (p *TStreamLoadRecord) SetMessage(val string) {
	p.Message = val
}
func (p *TStreamLoadRecord) SetUrl(val *string) {
	p.Url = val
}
func (p *TStreamLoadRecord) SetAuthCode(val *int64) {
	p.AuthCode = val
}
func (p *TStreamLoadRecord) SetTotalRows(val int64) {
	p.TotalRows = val
}
func (p *TStreamLoadRecord) SetLoadedRows(val int64) {
	p.LoadedRows = val
}
func (p *TStreamLoadRecord) SetFilteredRows(val int64) {
	p.FilteredRows = val
}
func (p *TStreamLoadRecord) SetUnselectedRows(val int64) {
	p.UnselectedRows = val
}
func (p *TStreamLoadRecord) SetLoadBytes(val int64) {
	p.LoadBytes = val
}
func (p *TStreamLoadRecord) SetStartTime(val int64) {
	p.StartTime = val
}
func (p *TStreamLoadRecord) SetFinishTime(val int64) {
	p.FinishTime = val
}
func (p *TStreamLoadRecord) SetComment(val *string) {
	p.Comment = val
}

var fieldIDToName_TStreamLoadRecord = map[int16]string{
	1:  "cluster",
	2:  "user",
	3:  "passwd",
	4:  "db",
	5:  "tbl",
	6:  "user_ip",
	7:  "label",
	8:  "status",
	9:  "message",
	10: "url",
	11: "auth_code",
	12: "total_rows",
	13: "loaded_rows",
	14: "filtered_rows",
	15: "unselected_rows",
	16: "load_bytes",
	17: "start_time",
	18: "finish_time",
	19: "comment",
}

func (p *TStreamLoadRecord) IsSetCluster() bool {
	return p.Cluster != nil
}

func (p *TStreamLoadRecord) IsSetUserIp() bool {
	return p.UserIp != nil
}

func (p *TStreamLoadRecord) IsSetUrl() bool {
	return p.Url != nil
}

func (p *TStreamLoadRecord) IsSetAuthCode() bool {
	return p.AuthCode != nil
}

func (p *TStreamLoadRecord) IsSetComment() bool {
	return p.Comment != nil
}

func (p *TStreamLoadRecord) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUser bool = false
	var issetPasswd bool = false
	var issetDb bool = false
	var issetTbl bool = false
	var issetLabel bool = false
	var issetStatus bool = false
	var issetMessage bool = false
	var issetTotalRows bool = false
	var issetLoadedRows bool = false
	var issetFilteredRows bool = false
	var issetUnselectedRows bool = false
	var issetLoadBytes bool = false
	var issetStartTime bool = false
	var issetFinishTime bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUser = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPasswd = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDb = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetTbl = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabel = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetMessage = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalRows = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetLoadedRows = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilteredRows = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetUnselectedRows = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetLoadBytes = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
				issetFinishTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUser {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPasswd {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetDb {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTbl {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetLabel {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetMessage {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetTotalRows {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetLoadedRows {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetFilteredRows {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetUnselectedRows {
		fieldId = 15
		goto RequiredFieldNotSetError
	}

	if !issetLoadBytes {
		fieldId = 16
		goto RequiredFieldNotSetError
	}

	if !issetStartTime {
		fieldId = 17
		goto RequiredFieldNotSetError
	}

	if !issetFinishTime {
		fieldId = 18
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TStreamLoadRecord[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TStreamLoadRecord[fieldId]))
}

func (p *TStreamLoadRecord) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Cluster = &v
	}
	return nil
}

func (p *TStreamLoadRecord) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.User = v
	}
	return nil
}

func (p *TStreamLoadRecord) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Passwd = v
	}
	return nil
}

func (p *TStreamLoadRecord) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Db = v
	}
	return nil
}

func (p *TStreamLoadRecord) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Tbl = v
	}
	return nil
}

func (p *TStreamLoadRecord) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserIp = &v
	}
	return nil
}

func (p *TStreamLoadRecord) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Label = v
	}
	return nil
}

func (p *TStreamLoadRecord) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *TStreamLoadRecord) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *TStreamLoadRecord) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Url = &v
	}
	return nil
}

func (p *TStreamLoadRecord) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.AuthCode = &v
	}
	return nil
}

func (p *TStreamLoadRecord) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TotalRows = v
	}
	return nil
}

func (p *TStreamLoadRecord) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.LoadedRows = v
	}
	return nil
}

func (p *TStreamLoadRecord) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.FilteredRows = v
	}
	return nil
}

func (p *TStreamLoadRecord) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UnselectedRows = v
	}
	return nil
}

func (p *TStreamLoadRecord) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.LoadBytes = v
	}
	return nil
}

func (p *TStreamLoadRecord) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *TStreamLoadRecord) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.FinishTime = v
	}
	return nil
}

func (p *TStreamLoadRecord) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Comment = &v
	}
	return nil
}

func (p *TStreamLoadRecord) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TStreamLoadRecord"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCluster() {
		if err = oprot.WriteFieldBegin("cluster", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cluster); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.User); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("passwd", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Passwd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("db", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Db); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tbl", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Tbl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIp() {
		if err = oprot.WriteFieldBegin("user_ip", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("label", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Label); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetUrl() {
		if err = oprot.WriteFieldBegin("url", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Url); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthCode() {
		if err = oprot.WriteFieldBegin("auth_code", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.AuthCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total_rows", thrift.I64, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TotalRows); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("loaded_rows", thrift.I64, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.LoadedRows); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filtered_rows", thrift.I64, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.FilteredRows); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("unselected_rows", thrift.I64, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UnselectedRows); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("load_bytes", thrift.I64, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.LoadBytes); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_time", thrift.I64, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("finish_time", thrift.I64, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.FinishTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *TStreamLoadRecord) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetComment() {
		if err = oprot.WriteFieldBegin("comment", thrift.STRING, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Comment); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *TStreamLoadRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStreamLoadRecord(%+v)", *p)
}

func (p *TStreamLoadRecord) DeepEqual(ano *TStreamLoadRecord) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cluster) {
		return false
	}
	if !p.Field2DeepEqual(ano.User) {
		return false
	}
	if !p.Field3DeepEqual(ano.Passwd) {
		return false
	}
	if !p.Field4DeepEqual(ano.Db) {
		return false
	}
	if !p.Field5DeepEqual(ano.Tbl) {
		return false
	}
	if !p.Field6DeepEqual(ano.UserIp) {
		return false
	}
	if !p.Field7DeepEqual(ano.Label) {
		return false
	}
	if !p.Field8DeepEqual(ano.Status) {
		return false
	}
	if !p.Field9DeepEqual(ano.Message) {
		return false
	}
	if !p.Field10DeepEqual(ano.Url) {
		return false
	}
	if !p.Field11DeepEqual(ano.AuthCode) {
		return false
	}
	if !p.Field12DeepEqual(ano.TotalRows) {
		return false
	}
	if !p.Field13DeepEqual(ano.LoadedRows) {
		return false
	}
	if !p.Field14DeepEqual(ano.FilteredRows) {
		return false
	}
	if !p.Field15DeepEqual(ano.UnselectedRows) {
		return false
	}
	if !p.Field16DeepEqual(ano.LoadBytes) {
		return false
	}
	if !p.Field17DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field18DeepEqual(ano.FinishTime) {
		return false
	}
	if !p.Field19DeepEqual(ano.Comment) {
		return false
	}
	return true
}

func (p *TStreamLoadRecord) Field1DeepEqual(src *string) bool {

	if p.Cluster == src {
		return true
	} else if p.Cluster == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cluster, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadRecord) Field2DeepEqual(src string) bool {

	if strings.Compare(p.User, src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadRecord) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Passwd, src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadRecord) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Db, src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadRecord) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Tbl, src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadRecord) Field6DeepEqual(src *string) bool {

	if p.UserIp == src {
		return true
	} else if p.UserIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserIp, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadRecord) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Label, src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadRecord) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadRecord) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadRecord) Field10DeepEqual(src *string) bool {

	if p.Url == src {
		return true
	} else if p.Url == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Url, *src) != 0 {
		return false
	}
	return true
}
func (p *TStreamLoadRecord) Field11DeepEqual(src *int64) bool {

	if p.AuthCode == src {
		return true
	} else if p.AuthCode == nil || src == nil {
		return false
	}
	if *p.AuthCode != *src {
		return false
	}
	return true
}
func (p *TStreamLoadRecord) Field12DeepEqual(src int64) bool {

	if p.TotalRows != src {
		return false
	}
	return true
}
func (p *TStreamLoadRecord) Field13DeepEqual(src int64) bool {

	if p.LoadedRows != src {
		return false
	}
	return true
}
func (p *TStreamLoadRecord) Field14DeepEqual(src int64) bool {

	if p.FilteredRows != src {
		return false
	}
	return true
}
func (p *TStreamLoadRecord) Field15DeepEqual(src int64) bool {

	if p.UnselectedRows != src {
		return false
	}
	return true
}
func (p *TStreamLoadRecord) Field16DeepEqual(src int64) bool {

	if p.LoadBytes != src {
		return false
	}
	return true
}
func (p *TStreamLoadRecord) Field17DeepEqual(src int64) bool {

	if p.StartTime != src {
		return false
	}
	return true
}
func (p *TStreamLoadRecord) Field18DeepEqual(src int64) bool {

	if p.FinishTime != src {
		return false
	}
	return true
}
func (p *TStreamLoadRecord) Field19DeepEqual(src *string) bool {

	if p.Comment == src {
		return true
	} else if p.Comment == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Comment, *src) != 0 {
		return false
	}
	return true
}

type TStreamLoadRecordResult_ struct {
	StreamLoadRecord map[string]*TStreamLoadRecord `thrift:"stream_load_record,1,required" frugal:"1,required,map<string:TStreamLoadRecord>" json:"stream_load_record"`
}

func NewTStreamLoadRecordResult_() *TStreamLoadRecordResult_ {
	return &TStreamLoadRecordResult_{}
}

func (p *TStreamLoadRecordResult_) InitDefault() {
	*p = TStreamLoadRecordResult_{}
}

func (p *TStreamLoadRecordResult_) GetStreamLoadRecord() (v map[string]*TStreamLoadRecord) {
	return p.StreamLoadRecord
}
func (p *TStreamLoadRecordResult_) SetStreamLoadRecord(val map[string]*TStreamLoadRecord) {
	p.StreamLoadRecord = val
}

var fieldIDToName_TStreamLoadRecordResult_ = map[int16]string{
	1: "stream_load_record",
}

func (p *TStreamLoadRecordResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStreamLoadRecord bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStreamLoadRecord = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStreamLoadRecord {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TStreamLoadRecordResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TStreamLoadRecordResult_[fieldId]))
}

func (p *TStreamLoadRecordResult_) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.StreamLoadRecord = make(map[string]*TStreamLoadRecord, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}
		_val := NewTStreamLoadRecord()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		p.StreamLoadRecord[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TStreamLoadRecordResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TStreamLoadRecordResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TStreamLoadRecordResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("stream_load_record", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.StreamLoadRecord)); err != nil {
		return err
	}
	for k, v := range p.StreamLoadRecord {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TStreamLoadRecordResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TStreamLoadRecordResult_(%+v)", *p)
}

func (p *TStreamLoadRecordResult_) DeepEqual(ano *TStreamLoadRecordResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.StreamLoadRecord) {
		return false
	}
	return true
}

func (p *TStreamLoadRecordResult_) Field1DeepEqual(src map[string]*TStreamLoadRecord) bool {

	if len(p.StreamLoadRecord) != len(src) {
		return false
	}
	for k, v := range p.StreamLoadRecord {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TDiskTrashInfo struct {
	RootPath          string `thrift:"root_path,1,required" frugal:"1,required,string" json:"root_path"`
	State             string `thrift:"state,2,required" frugal:"2,required,string" json:"state"`
	TrashUsedCapacity int64  `thrift:"trash_used_capacity,3,required" frugal:"3,required,i64" json:"trash_used_capacity"`
}

func NewTDiskTrashInfo() *TDiskTrashInfo {
	return &TDiskTrashInfo{}
}

func (p *TDiskTrashInfo) InitDefault() {
	*p = TDiskTrashInfo{}
}

func (p *TDiskTrashInfo) GetRootPath() (v string) {
	return p.RootPath
}

func (p *TDiskTrashInfo) GetState() (v string) {
	return p.State
}

func (p *TDiskTrashInfo) GetTrashUsedCapacity() (v int64) {
	return p.TrashUsedCapacity
}
func (p *TDiskTrashInfo) SetRootPath(val string) {
	p.RootPath = val
}
func (p *TDiskTrashInfo) SetState(val string) {
	p.State = val
}
func (p *TDiskTrashInfo) SetTrashUsedCapacity(val int64) {
	p.TrashUsedCapacity = val
}

var fieldIDToName_TDiskTrashInfo = map[int16]string{
	1: "root_path",
	2: "state",
	3: "trash_used_capacity",
}

func (p *TDiskTrashInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRootPath bool = false
	var issetState bool = false
	var issetTrashUsedCapacity bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRootPath = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetState = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetTrashUsedCapacity = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRootPath {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetState {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTrashUsedCapacity {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TDiskTrashInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TDiskTrashInfo[fieldId]))
}

func (p *TDiskTrashInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RootPath = v
	}
	return nil
}

func (p *TDiskTrashInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.State = v
	}
	return nil
}

func (p *TDiskTrashInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TrashUsedCapacity = v
	}
	return nil
}

func (p *TDiskTrashInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TDiskTrashInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TDiskTrashInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("root_path", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RootPath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TDiskTrashInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("state", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.State); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TDiskTrashInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("trash_used_capacity", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TrashUsedCapacity); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TDiskTrashInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDiskTrashInfo(%+v)", *p)
}

func (p *TDiskTrashInfo) DeepEqual(ano *TDiskTrashInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RootPath) {
		return false
	}
	if !p.Field2DeepEqual(ano.State) {
		return false
	}
	if !p.Field3DeepEqual(ano.TrashUsedCapacity) {
		return false
	}
	return true
}

func (p *TDiskTrashInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.RootPath, src) != 0 {
		return false
	}
	return true
}
func (p *TDiskTrashInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.State, src) != 0 {
		return false
	}
	return true
}
func (p *TDiskTrashInfo) Field3DeepEqual(src int64) bool {

	if p.TrashUsedCapacity != src {
		return false
	}
	return true
}

type TCheckStorageFormatResult_ struct {
	V1Tablets []int64 `thrift:"v1_tablets,1,optional" frugal:"1,optional,list<i64>" json:"v1_tablets,omitempty"`
	V2Tablets []int64 `thrift:"v2_tablets,2,optional" frugal:"2,optional,list<i64>" json:"v2_tablets,omitempty"`
}

func NewTCheckStorageFormatResult_() *TCheckStorageFormatResult_ {
	return &TCheckStorageFormatResult_{}
}

func (p *TCheckStorageFormatResult_) InitDefault() {
	*p = TCheckStorageFormatResult_{}
}

var TCheckStorageFormatResult__V1Tablets_DEFAULT []int64

func (p *TCheckStorageFormatResult_) GetV1Tablets() (v []int64) {
	if !p.IsSetV1Tablets() {
		return TCheckStorageFormatResult__V1Tablets_DEFAULT
	}
	return p.V1Tablets
}

var TCheckStorageFormatResult__V2Tablets_DEFAULT []int64

func (p *TCheckStorageFormatResult_) GetV2Tablets() (v []int64) {
	if !p.IsSetV2Tablets() {
		return TCheckStorageFormatResult__V2Tablets_DEFAULT
	}
	return p.V2Tablets
}
func (p *TCheckStorageFormatResult_) SetV1Tablets(val []int64) {
	p.V1Tablets = val
}
func (p *TCheckStorageFormatResult_) SetV2Tablets(val []int64) {
	p.V2Tablets = val
}

var fieldIDToName_TCheckStorageFormatResult_ = map[int16]string{
	1: "v1_tablets",
	2: "v2_tablets",
}

func (p *TCheckStorageFormatResult_) IsSetV1Tablets() bool {
	return p.V1Tablets != nil
}

func (p *TCheckStorageFormatResult_) IsSetV2Tablets() bool {
	return p.V2Tablets != nil
}

func (p *TCheckStorageFormatResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TCheckStorageFormatResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TCheckStorageFormatResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.V1Tablets = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.V1Tablets = append(p.V1Tablets, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TCheckStorageFormatResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.V2Tablets = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.V2Tablets = append(p.V2Tablets, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TCheckStorageFormatResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TCheckStorageFormatResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TCheckStorageFormatResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetV1Tablets() {
		if err = oprot.WriteFieldBegin("v1_tablets", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.V1Tablets)); err != nil {
			return err
		}
		for _, v := range p.V1Tablets {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TCheckStorageFormatResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetV2Tablets() {
		if err = oprot.WriteFieldBegin("v2_tablets", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.V2Tablets)); err != nil {
			return err
		}
		for _, v := range p.V2Tablets {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TCheckStorageFormatResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCheckStorageFormatResult_(%+v)", *p)
}

func (p *TCheckStorageFormatResult_) DeepEqual(ano *TCheckStorageFormatResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.V1Tablets) {
		return false
	}
	if !p.Field2DeepEqual(ano.V2Tablets) {
		return false
	}
	return true
}

func (p *TCheckStorageFormatResult_) Field1DeepEqual(src []int64) bool {

	if len(p.V1Tablets) != len(src) {
		return false
	}
	for i, v := range p.V1Tablets {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *TCheckStorageFormatResult_) Field2DeepEqual(src []int64) bool {

	if len(p.V2Tablets) != len(src) {
		return false
	}
	for i, v := range p.V2Tablets {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type TIngestBinlogRequest struct {
	TxnId          *int64           `thrift:"txn_id,1,optional" frugal:"1,optional,i64" json:"txn_id,omitempty"`
	RemoteTabletId *int64           `thrift:"remote_tablet_id,2,optional" frugal:"2,optional,i64" json:"remote_tablet_id,omitempty"`
	BinlogVersion  *int64           `thrift:"binlog_version,3,optional" frugal:"3,optional,i64" json:"binlog_version,omitempty"`
	RemoteHost     *string          `thrift:"remote_host,4,optional" frugal:"4,optional,string" json:"remote_host,omitempty"`
	RemotePort     *string          `thrift:"remote_port,5,optional" frugal:"5,optional,string" json:"remote_port,omitempty"`
	PartitionId    *int64           `thrift:"partition_id,6,optional" frugal:"6,optional,i64" json:"partition_id,omitempty"`
	LocalTabletId  *int64           `thrift:"local_tablet_id,7,optional" frugal:"7,optional,i64" json:"local_tablet_id,omitempty"`
	LoadId         *types.TUniqueId `thrift:"load_id,8,optional" frugal:"8,optional,types.TUniqueId" json:"load_id,omitempty"`
}

func NewTIngestBinlogRequest() *TIngestBinlogRequest {
	return &TIngestBinlogRequest{}
}

func (p *TIngestBinlogRequest) InitDefault() {
	*p = TIngestBinlogRequest{}
}

var TIngestBinlogRequest_TxnId_DEFAULT int64

func (p *TIngestBinlogRequest) GetTxnId() (v int64) {
	if !p.IsSetTxnId() {
		return TIngestBinlogRequest_TxnId_DEFAULT
	}
	return *p.TxnId
}

var TIngestBinlogRequest_RemoteTabletId_DEFAULT int64

func (p *TIngestBinlogRequest) GetRemoteTabletId() (v int64) {
	if !p.IsSetRemoteTabletId() {
		return TIngestBinlogRequest_RemoteTabletId_DEFAULT
	}
	return *p.RemoteTabletId
}

var TIngestBinlogRequest_BinlogVersion_DEFAULT int64

func (p *TIngestBinlogRequest) GetBinlogVersion() (v int64) {
	if !p.IsSetBinlogVersion() {
		return TIngestBinlogRequest_BinlogVersion_DEFAULT
	}
	return *p.BinlogVersion
}

var TIngestBinlogRequest_RemoteHost_DEFAULT string

func (p *TIngestBinlogRequest) GetRemoteHost() (v string) {
	if !p.IsSetRemoteHost() {
		return TIngestBinlogRequest_RemoteHost_DEFAULT
	}
	return *p.RemoteHost
}

var TIngestBinlogRequest_RemotePort_DEFAULT string

func (p *TIngestBinlogRequest) GetRemotePort() (v string) {
	if !p.IsSetRemotePort() {
		return TIngestBinlogRequest_RemotePort_DEFAULT
	}
	return *p.RemotePort
}

var TIngestBinlogRequest_PartitionId_DEFAULT int64

func (p *TIngestBinlogRequest) GetPartitionId() (v int64) {
	if !p.IsSetPartitionId() {
		return TIngestBinlogRequest_PartitionId_DEFAULT
	}
	return *p.PartitionId
}

var TIngestBinlogRequest_LocalTabletId_DEFAULT int64

func (p *TIngestBinlogRequest) GetLocalTabletId() (v int64) {
	if !p.IsSetLocalTabletId() {
		return TIngestBinlogRequest_LocalTabletId_DEFAULT
	}
	return *p.LocalTabletId
}

var TIngestBinlogRequest_LoadId_DEFAULT *types.TUniqueId

func (p *TIngestBinlogRequest) GetLoadId() (v *types.TUniqueId) {
	if !p.IsSetLoadId() {
		return TIngestBinlogRequest_LoadId_DEFAULT
	}
	return p.LoadId
}
func (p *TIngestBinlogRequest) SetTxnId(val *int64) {
	p.TxnId = val
}
func (p *TIngestBinlogRequest) SetRemoteTabletId(val *int64) {
	p.RemoteTabletId = val
}
func (p *TIngestBinlogRequest) SetBinlogVersion(val *int64) {
	p.BinlogVersion = val
}
func (p *TIngestBinlogRequest) SetRemoteHost(val *string) {
	p.RemoteHost = val
}
func (p *TIngestBinlogRequest) SetRemotePort(val *string) {
	p.RemotePort = val
}
func (p *TIngestBinlogRequest) SetPartitionId(val *int64) {
	p.PartitionId = val
}
func (p *TIngestBinlogRequest) SetLocalTabletId(val *int64) {
	p.LocalTabletId = val
}
func (p *TIngestBinlogRequest) SetLoadId(val *types.TUniqueId) {
	p.LoadId = val
}

var fieldIDToName_TIngestBinlogRequest = map[int16]string{
	1: "txn_id",
	2: "remote_tablet_id",
	3: "binlog_version",
	4: "remote_host",
	5: "remote_port",
	6: "partition_id",
	7: "local_tablet_id",
	8: "load_id",
}

func (p *TIngestBinlogRequest) IsSetTxnId() bool {
	return p.TxnId != nil
}

func (p *TIngestBinlogRequest) IsSetRemoteTabletId() bool {
	return p.RemoteTabletId != nil
}

func (p *TIngestBinlogRequest) IsSetBinlogVersion() bool {
	return p.BinlogVersion != nil
}

func (p *TIngestBinlogRequest) IsSetRemoteHost() bool {
	return p.RemoteHost != nil
}

func (p *TIngestBinlogRequest) IsSetRemotePort() bool {
	return p.RemotePort != nil
}

func (p *TIngestBinlogRequest) IsSetPartitionId() bool {
	return p.PartitionId != nil
}

func (p *TIngestBinlogRequest) IsSetLocalTabletId() bool {
	return p.LocalTabletId != nil
}

func (p *TIngestBinlogRequest) IsSetLoadId() bool {
	return p.LoadId != nil
}

func (p *TIngestBinlogRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TIngestBinlogRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TIngestBinlogRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TxnId = &v
	}
	return nil
}

func (p *TIngestBinlogRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.RemoteTabletId = &v
	}
	return nil
}

func (p *TIngestBinlogRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.BinlogVersion = &v
	}
	return nil
}

func (p *TIngestBinlogRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RemoteHost = &v
	}
	return nil
}

func (p *TIngestBinlogRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RemotePort = &v
	}
	return nil
}

func (p *TIngestBinlogRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PartitionId = &v
	}
	return nil
}

func (p *TIngestBinlogRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.LocalTabletId = &v
	}
	return nil
}

func (p *TIngestBinlogRequest) ReadField8(iprot thrift.TProtocol) error {
	p.LoadId = types.NewTUniqueId()
	if err := p.LoadId.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TIngestBinlogRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TIngestBinlogRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TIngestBinlogRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnId() {
		if err = oprot.WriteFieldBegin("txn_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TxnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TIngestBinlogRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteTabletId() {
		if err = oprot.WriteFieldBegin("remote_tablet_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.RemoteTabletId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TIngestBinlogRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBinlogVersion() {
		if err = oprot.WriteFieldBegin("binlog_version", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BinlogVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TIngestBinlogRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemoteHost() {
		if err = oprot.WriteFieldBegin("remote_host", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RemoteHost); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TIngestBinlogRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemotePort() {
		if err = oprot.WriteFieldBegin("remote_port", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RemotePort); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TIngestBinlogRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionId() {
		if err = oprot.WriteFieldBegin("partition_id", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PartitionId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TIngestBinlogRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocalTabletId() {
		if err = oprot.WriteFieldBegin("local_tablet_id", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LocalTabletId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TIngestBinlogRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadId() {
		if err = oprot.WriteFieldBegin("load_id", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.LoadId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TIngestBinlogRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIngestBinlogRequest(%+v)", *p)
}

func (p *TIngestBinlogRequest) DeepEqual(ano *TIngestBinlogRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field2DeepEqual(ano.RemoteTabletId) {
		return false
	}
	if !p.Field3DeepEqual(ano.BinlogVersion) {
		return false
	}
	if !p.Field4DeepEqual(ano.RemoteHost) {
		return false
	}
	if !p.Field5DeepEqual(ano.RemotePort) {
		return false
	}
	if !p.Field6DeepEqual(ano.PartitionId) {
		return false
	}
	if !p.Field7DeepEqual(ano.LocalTabletId) {
		return false
	}
	if !p.Field8DeepEqual(ano.LoadId) {
		return false
	}
	return true
}

func (p *TIngestBinlogRequest) Field1DeepEqual(src *int64) bool {

	if p.TxnId == src {
		return true
	} else if p.TxnId == nil || src == nil {
		return false
	}
	if *p.TxnId != *src {
		return false
	}
	return true
}
func (p *TIngestBinlogRequest) Field2DeepEqual(src *int64) bool {

	if p.RemoteTabletId == src {
		return true
	} else if p.RemoteTabletId == nil || src == nil {
		return false
	}
	if *p.RemoteTabletId != *src {
		return false
	}
	return true
}
func (p *TIngestBinlogRequest) Field3DeepEqual(src *int64) bool {

	if p.BinlogVersion == src {
		return true
	} else if p.BinlogVersion == nil || src == nil {
		return false
	}
	if *p.BinlogVersion != *src {
		return false
	}
	return true
}
func (p *TIngestBinlogRequest) Field4DeepEqual(src *string) bool {

	if p.RemoteHost == src {
		return true
	} else if p.RemoteHost == nil || src == nil {
		return false
	}
	if strings.Compare(*p.RemoteHost, *src) != 0 {
		return false
	}
	return true
}
func (p *TIngestBinlogRequest) Field5DeepEqual(src *string) bool {

	if p.RemotePort == src {
		return true
	} else if p.RemotePort == nil || src == nil {
		return false
	}
	if strings.Compare(*p.RemotePort, *src) != 0 {
		return false
	}
	return true
}
func (p *TIngestBinlogRequest) Field6DeepEqual(src *int64) bool {

	if p.PartitionId == src {
		return true
	} else if p.PartitionId == nil || src == nil {
		return false
	}
	if *p.PartitionId != *src {
		return false
	}
	return true
}
func (p *TIngestBinlogRequest) Field7DeepEqual(src *int64) bool {

	if p.LocalTabletId == src {
		return true
	} else if p.LocalTabletId == nil || src == nil {
		return false
	}
	if *p.LocalTabletId != *src {
		return false
	}
	return true
}
func (p *TIngestBinlogRequest) Field8DeepEqual(src *types.TUniqueId) bool {

	if !p.LoadId.DeepEqual(src) {
		return false
	}
	return true
}

type TIngestBinlogResult_ struct {
	Status  *status.TStatus `thrift:"status,1,optional" frugal:"1,optional,status.TStatus" json:"status,omitempty"`
	IsAsync *bool           `thrift:"is_async,2,optional" frugal:"2,optional,bool" json:"is_async,omitempty"`
}

func NewTIngestBinlogResult_() *TIngestBinlogResult_ {
	return &TIngestBinlogResult_{}
}

func (p *TIngestBinlogResult_) InitDefault() {
	*p = TIngestBinlogResult_{}
}

var TIngestBinlogResult__Status_DEFAULT *status.TStatus

func (p *TIngestBinlogResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TIngestBinlogResult__Status_DEFAULT
	}
	return p.Status
}

var TIngestBinlogResult__IsAsync_DEFAULT bool

func (p *TIngestBinlogResult_) GetIsAsync() (v bool) {
	if !p.IsSetIsAsync() {
		return TIngestBinlogResult__IsAsync_DEFAULT
	}
	return *p.IsAsync
}
func (p *TIngestBinlogResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}
func (p *TIngestBinlogResult_) SetIsAsync(val *bool) {
	p.IsAsync = val
}

var fieldIDToName_TIngestBinlogResult_ = map[int16]string{
	1: "status",
	2: "is_async",
}

func (p *TIngestBinlogResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TIngestBinlogResult_) IsSetIsAsync() bool {
	return p.IsAsync != nil
}

func (p *TIngestBinlogResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TIngestBinlogResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TIngestBinlogResult_) ReadField1(iprot thrift.TProtocol) error {
	p.Status = status.NewTStatus()
	if err := p.Status.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TIngestBinlogResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsAsync = &v
	}
	return nil
}

func (p *TIngestBinlogResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TIngestBinlogResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TIngestBinlogResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Status.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TIngestBinlogResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsAsync() {
		if err = oprot.WriteFieldBegin("is_async", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsAsync); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TIngestBinlogResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIngestBinlogResult_(%+v)", *p)
}

func (p *TIngestBinlogResult_) DeepEqual(ano *TIngestBinlogResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.IsAsync) {
		return false
	}
	return true
}

func (p *TIngestBinlogResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TIngestBinlogResult_) Field2DeepEqual(src *bool) bool {

	if p.IsAsync == src {
		return true
	} else if p.IsAsync == nil || src == nil {
		return false
	}
	if *p.IsAsync != *src {
		return false
	}
	return true
}

type TQueryIngestBinlogRequest struct {
	TxnId       *int64           `thrift:"txn_id,1,optional" frugal:"1,optional,i64" json:"txn_id,omitempty"`
	PartitionId *int64           `thrift:"partition_id,2,optional" frugal:"2,optional,i64" json:"partition_id,omitempty"`
	TabletId    *int64           `thrift:"tablet_id,3,optional" frugal:"3,optional,i64" json:"tablet_id,omitempty"`
	LoadId      *types.TUniqueId `thrift:"load_id,4,optional" frugal:"4,optional,types.TUniqueId" json:"load_id,omitempty"`
}

func NewTQueryIngestBinlogRequest() *TQueryIngestBinlogRequest {
	return &TQueryIngestBinlogRequest{}
}

func (p *TQueryIngestBinlogRequest) InitDefault() {
	*p = TQueryIngestBinlogRequest{}
}

var TQueryIngestBinlogRequest_TxnId_DEFAULT int64

func (p *TQueryIngestBinlogRequest) GetTxnId() (v int64) {
	if !p.IsSetTxnId() {
		return TQueryIngestBinlogRequest_TxnId_DEFAULT
	}
	return *p.TxnId
}

var TQueryIngestBinlogRequest_PartitionId_DEFAULT int64

func (p *TQueryIngestBinlogRequest) GetPartitionId() (v int64) {
	if !p.IsSetPartitionId() {
		return TQueryIngestBinlogRequest_PartitionId_DEFAULT
	}
	return *p.PartitionId
}

var TQueryIngestBinlogRequest_TabletId_DEFAULT int64

func (p *TQueryIngestBinlogRequest) GetTabletId() (v int64) {
	if !p.IsSetTabletId() {
		return TQueryIngestBinlogRequest_TabletId_DEFAULT
	}
	return *p.TabletId
}

var TQueryIngestBinlogRequest_LoadId_DEFAULT *types.TUniqueId

func (p *TQueryIngestBinlogRequest) GetLoadId() (v *types.TUniqueId) {
	if !p.IsSetLoadId() {
		return TQueryIngestBinlogRequest_LoadId_DEFAULT
	}
	return p.LoadId
}
func (p *TQueryIngestBinlogRequest) SetTxnId(val *int64) {
	p.TxnId = val
}
func (p *TQueryIngestBinlogRequest) SetPartitionId(val *int64) {
	p.PartitionId = val
}
func (p *TQueryIngestBinlogRequest) SetTabletId(val *int64) {
	p.TabletId = val
}
func (p *TQueryIngestBinlogRequest) SetLoadId(val *types.TUniqueId) {
	p.LoadId = val
}

var fieldIDToName_TQueryIngestBinlogRequest = map[int16]string{
	1: "txn_id",
	2: "partition_id",
	3: "tablet_id",
	4: "load_id",
}

func (p *TQueryIngestBinlogRequest) IsSetTxnId() bool {
	return p.TxnId != nil
}

func (p *TQueryIngestBinlogRequest) IsSetPartitionId() bool {
	return p.PartitionId != nil
}

func (p *TQueryIngestBinlogRequest) IsSetTabletId() bool {
	return p.TabletId != nil
}

func (p *TQueryIngestBinlogRequest) IsSetLoadId() bool {
	return p.LoadId != nil
}

func (p *TQueryIngestBinlogRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TQueryIngestBinlogRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TQueryIngestBinlogRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TxnId = &v
	}
	return nil
}

func (p *TQueryIngestBinlogRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PartitionId = &v
	}
	return nil
}

func (p *TQueryIngestBinlogRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TabletId = &v
	}
	return nil
}

func (p *TQueryIngestBinlogRequest) ReadField4(iprot thrift.TProtocol) error {
	p.LoadId = types.NewTUniqueId()
	if err := p.LoadId.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TQueryIngestBinlogRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TQueryIngestBinlogRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TQueryIngestBinlogRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnId() {
		if err = oprot.WriteFieldBegin("txn_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TxnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TQueryIngestBinlogRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionId() {
		if err = oprot.WriteFieldBegin("partition_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PartitionId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TQueryIngestBinlogRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTabletId() {
		if err = oprot.WriteFieldBegin("tablet_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TabletId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TQueryIngestBinlogRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadId() {
		if err = oprot.WriteFieldBegin("load_id", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.LoadId.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TQueryIngestBinlogRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TQueryIngestBinlogRequest(%+v)", *p)
}

func (p *TQueryIngestBinlogRequest) DeepEqual(ano *TQueryIngestBinlogRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field2DeepEqual(ano.PartitionId) {
		return false
	}
	if !p.Field3DeepEqual(ano.TabletId) {
		return false
	}
	if !p.Field4DeepEqual(ano.LoadId) {
		return false
	}
	return true
}

func (p *TQueryIngestBinlogRequest) Field1DeepEqual(src *int64) bool {

	if p.TxnId == src {
		return true
	} else if p.TxnId == nil || src == nil {
		return false
	}
	if *p.TxnId != *src {
		return false
	}
	return true
}
func (p *TQueryIngestBinlogRequest) Field2DeepEqual(src *int64) bool {

	if p.PartitionId == src {
		return true
	} else if p.PartitionId == nil || src == nil {
		return false
	}
	if *p.PartitionId != *src {
		return false
	}
	return true
}
func (p *TQueryIngestBinlogRequest) Field3DeepEqual(src *int64) bool {

	if p.TabletId == src {
		return true
	} else if p.TabletId == nil || src == nil {
		return false
	}
	if *p.TabletId != *src {
		return false
	}
	return true
}
func (p *TQueryIngestBinlogRequest) Field4DeepEqual(src *types.TUniqueId) bool {

	if !p.LoadId.DeepEqual(src) {
		return false
	}
	return true
}

type TQueryIngestBinlogResult_ struct {
	Status *TIngestBinlogStatus `thrift:"status,1,optional" frugal:"1,optional,TIngestBinlogStatus" json:"status,omitempty"`
	ErrMsg *string              `thrift:"err_msg,2,optional" frugal:"2,optional,string" json:"err_msg,omitempty"`
}

func NewTQueryIngestBinlogResult_() *TQueryIngestBinlogResult_ {
	return &TQueryIngestBinlogResult_{}
}

func (p *TQueryIngestBinlogResult_) InitDefault() {
	*p = TQueryIngestBinlogResult_{}
}

var TQueryIngestBinlogResult__Status_DEFAULT TIngestBinlogStatus

func (p *TQueryIngestBinlogResult_) GetStatus() (v TIngestBinlogStatus) {
	if !p.IsSetStatus() {
		return TQueryIngestBinlogResult__Status_DEFAULT
	}
	return *p.Status
}

var TQueryIngestBinlogResult__ErrMsg_DEFAULT string

func (p *TQueryIngestBinlogResult_) GetErrMsg() (v string) {
	if !p.IsSetErrMsg() {
		return TQueryIngestBinlogResult__ErrMsg_DEFAULT
	}
	return *p.ErrMsg
}
func (p *TQueryIngestBinlogResult_) SetStatus(val *TIngestBinlogStatus) {
	p.Status = val
}
func (p *TQueryIngestBinlogResult_) SetErrMsg(val *string) {
	p.ErrMsg = val
}

var fieldIDToName_TQueryIngestBinlogResult_ = map[int16]string{
	1: "status",
	2: "err_msg",
}

func (p *TQueryIngestBinlogResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TQueryIngestBinlogResult_) IsSetErrMsg() bool {
	return p.ErrMsg != nil
}

func (p *TQueryIngestBinlogResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TQueryIngestBinlogResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TQueryIngestBinlogResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TIngestBinlogStatus(v)
		p.Status = &tmp
	}
	return nil
}

func (p *TQueryIngestBinlogResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ErrMsg = &v
	}
	return nil
}

func (p *TQueryIngestBinlogResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TQueryIngestBinlogResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TQueryIngestBinlogResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TQueryIngestBinlogResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrMsg() {
		if err = oprot.WriteFieldBegin("err_msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ErrMsg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TQueryIngestBinlogResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TQueryIngestBinlogResult_(%+v)", *p)
}

func (p *TQueryIngestBinlogResult_) DeepEqual(ano *TQueryIngestBinlogResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.ErrMsg) {
		return false
	}
	return true
}

func (p *TQueryIngestBinlogResult_) Field1DeepEqual(src *TIngestBinlogStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}
func (p *TQueryIngestBinlogResult_) Field2DeepEqual(src *string) bool {

	if p.ErrMsg == src {
		return true
	} else if p.ErrMsg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ErrMsg, *src) != 0 {
		return false
	}
	return true
}

type TWorkloadGroupInfo struct {
	Id                     *int64  `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Name                   *string `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty"`
	Version                *int64  `thrift:"version,3,optional" frugal:"3,optional,i64" json:"version,omitempty"`
	CpuShare               *int64  `thrift:"cpu_share,4,optional" frugal:"4,optional,i64" json:"cpu_share,omitempty"`
	CpuHardLimit           *int32  `thrift:"cpu_hard_limit,5,optional" frugal:"5,optional,i32" json:"cpu_hard_limit,omitempty"`
	MemLimit               *string `thrift:"mem_limit,6,optional" frugal:"6,optional,string" json:"mem_limit,omitempty"`
	EnableMemoryOvercommit *bool   `thrift:"enable_memory_overcommit,7,optional" frugal:"7,optional,bool" json:"enable_memory_overcommit,omitempty"`
	EnableCpuHardLimit     *bool   `thrift:"enable_cpu_hard_limit,8,optional" frugal:"8,optional,bool" json:"enable_cpu_hard_limit,omitempty"`
}

func NewTWorkloadGroupInfo() *TWorkloadGroupInfo {
	return &TWorkloadGroupInfo{}
}

func (p *TWorkloadGroupInfo) InitDefault() {
	*p = TWorkloadGroupInfo{}
}

var TWorkloadGroupInfo_Id_DEFAULT int64

func (p *TWorkloadGroupInfo) GetId() (v int64) {
	if !p.IsSetId() {
		return TWorkloadGroupInfo_Id_DEFAULT
	}
	return *p.Id
}

var TWorkloadGroupInfo_Name_DEFAULT string

func (p *TWorkloadGroupInfo) GetName() (v string) {
	if !p.IsSetName() {
		return TWorkloadGroupInfo_Name_DEFAULT
	}
	return *p.Name
}

var TWorkloadGroupInfo_Version_DEFAULT int64

func (p *TWorkloadGroupInfo) GetVersion() (v int64) {
	if !p.IsSetVersion() {
		return TWorkloadGroupInfo_Version_DEFAULT
	}
	return *p.Version
}

var TWorkloadGroupInfo_CpuShare_DEFAULT int64

func (p *TWorkloadGroupInfo) GetCpuShare() (v int64) {
	if !p.IsSetCpuShare() {
		return TWorkloadGroupInfo_CpuShare_DEFAULT
	}
	return *p.CpuShare
}

var TWorkloadGroupInfo_CpuHardLimit_DEFAULT int32

func (p *TWorkloadGroupInfo) GetCpuHardLimit() (v int32) {
	if !p.IsSetCpuHardLimit() {
		return TWorkloadGroupInfo_CpuHardLimit_DEFAULT
	}
	return *p.CpuHardLimit
}

var TWorkloadGroupInfo_MemLimit_DEFAULT string

func (p *TWorkloadGroupInfo) GetMemLimit() (v string) {
	if !p.IsSetMemLimit() {
		return TWorkloadGroupInfo_MemLimit_DEFAULT
	}
	return *p.MemLimit
}

var TWorkloadGroupInfo_EnableMemoryOvercommit_DEFAULT bool

func (p *TWorkloadGroupInfo) GetEnableMemoryOvercommit() (v bool) {
	if !p.IsSetEnableMemoryOvercommit() {
		return TWorkloadGroupInfo_EnableMemoryOvercommit_DEFAULT
	}
	return *p.EnableMemoryOvercommit
}

var TWorkloadGroupInfo_EnableCpuHardLimit_DEFAULT bool

func (p *TWorkloadGroupInfo) GetEnableCpuHardLimit() (v bool) {
	if !p.IsSetEnableCpuHardLimit() {
		return TWorkloadGroupInfo_EnableCpuHardLimit_DEFAULT
	}
	return *p.EnableCpuHardLimit
}
func (p *TWorkloadGroupInfo) SetId(val *int64) {
	p.Id = val
}
func (p *TWorkloadGroupInfo) SetName(val *string) {
	p.Name = val
}
func (p *TWorkloadGroupInfo) SetVersion(val *int64) {
	p.Version = val
}
func (p *TWorkloadGroupInfo) SetCpuShare(val *int64) {
	p.CpuShare = val
}
func (p *TWorkloadGroupInfo) SetCpuHardLimit(val *int32) {
	p.CpuHardLimit = val
}
func (p *TWorkloadGroupInfo) SetMemLimit(val *string) {
	p.MemLimit = val
}
func (p *TWorkloadGroupInfo) SetEnableMemoryOvercommit(val *bool) {
	p.EnableMemoryOvercommit = val
}
func (p *TWorkloadGroupInfo) SetEnableCpuHardLimit(val *bool) {
	p.EnableCpuHardLimit = val
}

var fieldIDToName_TWorkloadGroupInfo = map[int16]string{
	1: "id",
	2: "name",
	3: "version",
	4: "cpu_share",
	5: "cpu_hard_limit",
	6: "mem_limit",
	7: "enable_memory_overcommit",
	8: "enable_cpu_hard_limit",
}

func (p *TWorkloadGroupInfo) IsSetId() bool {
	return p.Id != nil
}

func (p *TWorkloadGroupInfo) IsSetName() bool {
	return p.Name != nil
}

func (p *TWorkloadGroupInfo) IsSetVersion() bool {
	return p.Version != nil
}

func (p *TWorkloadGroupInfo) IsSetCpuShare() bool {
	return p.CpuShare != nil
}

func (p *TWorkloadGroupInfo) IsSetCpuHardLimit() bool {
	return p.CpuHardLimit != nil
}

func (p *TWorkloadGroupInfo) IsSetMemLimit() bool {
	return p.MemLimit != nil
}

func (p *TWorkloadGroupInfo) IsSetEnableMemoryOvercommit() bool {
	return p.EnableMemoryOvercommit != nil
}

func (p *TWorkloadGroupInfo) IsSetEnableCpuHardLimit() bool {
	return p.EnableCpuHardLimit != nil
}

func (p *TWorkloadGroupInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TWorkloadGroupInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TWorkloadGroupInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = &v
	}
	return nil
}

func (p *TWorkloadGroupInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}

func (p *TWorkloadGroupInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Version = &v
	}
	return nil
}

func (p *TWorkloadGroupInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.CpuShare = &v
	}
	return nil
}

func (p *TWorkloadGroupInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.CpuHardLimit = &v
	}
	return nil
}

func (p *TWorkloadGroupInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MemLimit = &v
	}
	return nil
}

func (p *TWorkloadGroupInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.EnableMemoryOvercommit = &v
	}
	return nil
}

func (p *TWorkloadGroupInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.EnableCpuHardLimit = &v
	}
	return nil
}

func (p *TWorkloadGroupInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TWorkloadGroupInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TWorkloadGroupInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TWorkloadGroupInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TWorkloadGroupInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TWorkloadGroupInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpuShare() {
		if err = oprot.WriteFieldBegin("cpu_share", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CpuShare); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TWorkloadGroupInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpuHardLimit() {
		if err = oprot.WriteFieldBegin("cpu_hard_limit", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.CpuHardLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TWorkloadGroupInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemLimit() {
		if err = oprot.WriteFieldBegin("mem_limit", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MemLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TWorkloadGroupInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableMemoryOvercommit() {
		if err = oprot.WriteFieldBegin("enable_memory_overcommit", thrift.BOOL, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableMemoryOvercommit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TWorkloadGroupInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableCpuHardLimit() {
		if err = oprot.WriteFieldBegin("enable_cpu_hard_limit", thrift.BOOL, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableCpuHardLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TWorkloadGroupInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TWorkloadGroupInfo(%+v)", *p)
}

func (p *TWorkloadGroupInfo) DeepEqual(ano *TWorkloadGroupInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.CpuShare) {
		return false
	}
	if !p.Field5DeepEqual(ano.CpuHardLimit) {
		return false
	}
	if !p.Field6DeepEqual(ano.MemLimit) {
		return false
	}
	if !p.Field7DeepEqual(ano.EnableMemoryOvercommit) {
		return false
	}
	if !p.Field8DeepEqual(ano.EnableCpuHardLimit) {
		return false
	}
	return true
}

func (p *TWorkloadGroupInfo) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *TWorkloadGroupInfo) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *TWorkloadGroupInfo) Field3DeepEqual(src *int64) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if *p.Version != *src {
		return false
	}
	return true
}
func (p *TWorkloadGroupInfo) Field4DeepEqual(src *int64) bool {

	if p.CpuShare == src {
		return true
	} else if p.CpuShare == nil || src == nil {
		return false
	}
	if *p.CpuShare != *src {
		return false
	}
	return true
}
func (p *TWorkloadGroupInfo) Field5DeepEqual(src *int32) bool {

	if p.CpuHardLimit == src {
		return true
	} else if p.CpuHardLimit == nil || src == nil {
		return false
	}
	if *p.CpuHardLimit != *src {
		return false
	}
	return true
}
func (p *TWorkloadGroupInfo) Field6DeepEqual(src *string) bool {

	if p.MemLimit == src {
		return true
	} else if p.MemLimit == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MemLimit, *src) != 0 {
		return false
	}
	return true
}
func (p *TWorkloadGroupInfo) Field7DeepEqual(src *bool) bool {

	if p.EnableMemoryOvercommit == src {
		return true
	} else if p.EnableMemoryOvercommit == nil || src == nil {
		return false
	}
	if *p.EnableMemoryOvercommit != *src {
		return false
	}
	return true
}
func (p *TWorkloadGroupInfo) Field8DeepEqual(src *bool) bool {

	if p.EnableCpuHardLimit == src {
		return true
	} else if p.EnableCpuHardLimit == nil || src == nil {
		return false
	}
	if *p.EnableCpuHardLimit != *src {
		return false
	}
	return true
}

type TopicInfo struct {
	WorkloadGroupInfo *TWorkloadGroupInfo `thrift:"workload_group_info,1,optional" frugal:"1,optional,TWorkloadGroupInfo" json:"workload_group_info,omitempty"`
}

func NewTopicInfo() *TopicInfo {
	return &TopicInfo{}
}

func (p *TopicInfo) InitDefault() {
	*p = TopicInfo{}
}

var TopicInfo_WorkloadGroupInfo_DEFAULT *TWorkloadGroupInfo

func (p *TopicInfo) GetWorkloadGroupInfo() (v *TWorkloadGroupInfo) {
	if !p.IsSetWorkloadGroupInfo() {
		return TopicInfo_WorkloadGroupInfo_DEFAULT
	}
	return p.WorkloadGroupInfo
}
func (p *TopicInfo) SetWorkloadGroupInfo(val *TWorkloadGroupInfo) {
	p.WorkloadGroupInfo = val
}

var fieldIDToName_TopicInfo = map[int16]string{
	1: "workload_group_info",
}

func (p *TopicInfo) IsSetWorkloadGroupInfo() bool {
	return p.WorkloadGroupInfo != nil
}

func (p *TopicInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TopicInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TopicInfo) ReadField1(iprot thrift.TProtocol) error {
	p.WorkloadGroupInfo = NewTWorkloadGroupInfo()
	if err := p.WorkloadGroupInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TopicInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TopicInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TopicInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkloadGroupInfo() {
		if err = oprot.WriteFieldBegin("workload_group_info", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.WorkloadGroupInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TopicInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopicInfo(%+v)", *p)
}

func (p *TopicInfo) DeepEqual(ano *TopicInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkloadGroupInfo) {
		return false
	}
	return true
}

func (p *TopicInfo) Field1DeepEqual(src *TWorkloadGroupInfo) bool {

	if !p.WorkloadGroupInfo.DeepEqual(src) {
		return false
	}
	return true
}

type TPublishTopicRequest struct {
	TopicMap map[TTopicInfoType][]*TopicInfo `thrift:"topic_map,1,required" frugal:"1,required,map<TTopicInfoType:list<TopicInfo>>" json:"topic_map"`
}

func NewTPublishTopicRequest() *TPublishTopicRequest {
	return &TPublishTopicRequest{}
}

func (p *TPublishTopicRequest) InitDefault() {
	*p = TPublishTopicRequest{}
}

func (p *TPublishTopicRequest) GetTopicMap() (v map[TTopicInfoType][]*TopicInfo) {
	return p.TopicMap
}
func (p *TPublishTopicRequest) SetTopicMap(val map[TTopicInfoType][]*TopicInfo) {
	p.TopicMap = val
}

var fieldIDToName_TPublishTopicRequest = map[int16]string{
	1: "topic_map",
}

func (p *TPublishTopicRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTopicMap bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTopicMap = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTopicMap {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPublishTopicRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPublishTopicRequest[fieldId]))
}

func (p *TPublishTopicRequest) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.TopicMap = make(map[TTopicInfoType][]*TopicInfo, size)
	for i := 0; i < size; i++ {
		var _key TTopicInfoType
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = TTopicInfoType(v)
		}

		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]*TopicInfo, 0, size)
		for i := 0; i < size; i++ {
			_elem := NewTopicInfo()
			if err := _elem.Read(iprot); err != nil {
				return err
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.TopicMap[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TPublishTopicRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPublishTopicRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPublishTopicRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("topic_map", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.TopicMap)); err != nil {
		return err
	}
	for k, v := range p.TopicMap {

		if err := oprot.WriteI32(int32(k)); err != nil {
			return err
		}

		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPublishTopicRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPublishTopicRequest(%+v)", *p)
}

func (p *TPublishTopicRequest) DeepEqual(ano *TPublishTopicRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TopicMap) {
		return false
	}
	return true
}

func (p *TPublishTopicRequest) Field1DeepEqual(src map[TTopicInfoType][]*TopicInfo) bool {

	if len(p.TopicMap) != len(src) {
		return false
	}
	for k, v := range p.TopicMap {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}

type TPublishTopicResult_ struct {
	Status *status.TStatus `thrift:"status,1,required" frugal:"1,required,status.TStatus" json:"status"`
}

func NewTPublishTopicResult_() *TPublishTopicResult_ {
	return &TPublishTopicResult_{}
}

func (p *TPublishTopicResult_) InitDefault() {
	*p = TPublishTopicResult_{}
}

var TPublishTopicResult__Status_DEFAULT *status.TStatus

func (p *TPublishTopicResult_) GetStatus() (v *status.TStatus) {
	if !p.IsSetStatus() {
		return TPublishTopicResult__Status_DEFAULT
	}
	return p.Status
}
func (p *TPublishTopicResult_) SetStatus(val *status.TStatus) {
	p.Status = val
}

var fieldIDToName_TPublishTopicResult_ = map[int16]string{
	1: "status",
}

func (p *TPublishTopicResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TPublishTopicResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TPublishTopicResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TPublishTopicResult_[fieldId]))
}

func (p *TPublishTopicResult_) ReadField1(iprot thrift.TProtocol) error {
	p.Status = status.NewTStatus()
	if err := p.Status.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TPublishTopicResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TPublishTopicResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TPublishTopicResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Status.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TPublishTopicResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPublishTopicResult_(%+v)", *p)
}

func (p *TPublishTopicResult_) DeepEqual(ano *TPublishTopicResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *TPublishTopicResult_) Field1DeepEqual(src *status.TStatus) bool {

	if !p.Status.DeepEqual(src) {
		return false
	}
	return true
}

type BackendService interface {
	ExecPlanFragment(ctx context.Context, params *palointernalservice.TExecPlanFragmentParams) (r *palointernalservice.TExecPlanFragmentResult_, err error)

	CancelPlanFragment(ctx context.Context, params *palointernalservice.TCancelPlanFragmentParams) (r *palointernalservice.TCancelPlanFragmentResult_, err error)

	TransmitData(ctx context.Context, params *palointernalservice.TTransmitDataParams) (r *palointernalservice.TTransmitDataResult_, err error)

	SubmitTasks(ctx context.Context, tasks []*agentservice.TAgentTaskRequest) (r *agentservice.TAgentResult_, err error)

	MakeSnapshot(ctx context.Context, snapshotRequest *agentservice.TSnapshotRequest) (r *agentservice.TAgentResult_, err error)

	ReleaseSnapshot(ctx context.Context, snapshotPath string) (r *agentservice.TAgentResult_, err error)

	PublishClusterState(ctx context.Context, request *agentservice.TAgentPublishRequest) (r *agentservice.TAgentResult_, err error)

	SubmitExportTask(ctx context.Context, request *TExportTaskRequest) (r *status.TStatus, err error)

	GetExportStatus(ctx context.Context, taskId *types.TUniqueId) (r *palointernalservice.TExportStatusResult_, err error)

	EraseExportTask(ctx context.Context, taskId *types.TUniqueId) (r *status.TStatus, err error)

	GetTabletStat(ctx context.Context) (r *TTabletStatResult_, err error)

	GetTrashUsedCapacity(ctx context.Context) (r int64, err error)

	GetDiskTrashUsedCapacity(ctx context.Context) (r []*TDiskTrashInfo, err error)

	SubmitRoutineLoadTask(ctx context.Context, tasks []*TRoutineLoadTask) (r *status.TStatus, err error)

	OpenScanner(ctx context.Context, params *dorisexternalservice.TScanOpenParams) (r *dorisexternalservice.TScanOpenResult_, err error)

	GetNext(ctx context.Context, params *dorisexternalservice.TScanNextBatchParams) (r *dorisexternalservice.TScanBatchResult_, err error)

	CloseScanner(ctx context.Context, params *dorisexternalservice.TScanCloseParams) (r *dorisexternalservice.TScanCloseResult_, err error)

	GetStreamLoadRecord(ctx context.Context, lastStreamRecordTime int64) (r *TStreamLoadRecordResult_, err error)

	CleanTrash(ctx context.Context) (err error)

	CheckStorageFormat(ctx context.Context) (r *TCheckStorageFormatResult_, err error)

	IngestBinlog(ctx context.Context, ingestBinlogRequest *TIngestBinlogRequest) (r *TIngestBinlogResult_, err error)

	QueryIngestBinlog(ctx context.Context, queryIngestBinlogRequest *TQueryIngestBinlogRequest) (r *TQueryIngestBinlogResult_, err error)

	PublishTopicInfo(ctx context.Context, topicRequest *TPublishTopicRequest) (r *TPublishTopicResult_, err error)
}

type BackendServiceClient struct {
	c thrift.TClient
}

func NewBackendServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BackendServiceClient {
	return &BackendServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewBackendServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BackendServiceClient {
	return &BackendServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewBackendServiceClient(c thrift.TClient) *BackendServiceClient {
	return &BackendServiceClient{
		c: c,
	}
}

func (p *BackendServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *BackendServiceClient) ExecPlanFragment(ctx context.Context, params *palointernalservice.TExecPlanFragmentParams) (r *palointernalservice.TExecPlanFragmentResult_, err error) {
	var _args BackendServiceExecPlanFragmentArgs
	_args.Params = params
	var _result BackendServiceExecPlanFragmentResult
	if err = p.Client_().Call(ctx, "exec_plan_fragment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) CancelPlanFragment(ctx context.Context, params *palointernalservice.TCancelPlanFragmentParams) (r *palointernalservice.TCancelPlanFragmentResult_, err error) {
	var _args BackendServiceCancelPlanFragmentArgs
	_args.Params = params
	var _result BackendServiceCancelPlanFragmentResult
	if err = p.Client_().Call(ctx, "cancel_plan_fragment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) TransmitData(ctx context.Context, params *palointernalservice.TTransmitDataParams) (r *palointernalservice.TTransmitDataResult_, err error) {
	var _args BackendServiceTransmitDataArgs
	_args.Params = params
	var _result BackendServiceTransmitDataResult
	if err = p.Client_().Call(ctx, "transmit_data", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) SubmitTasks(ctx context.Context, tasks []*agentservice.TAgentTaskRequest) (r *agentservice.TAgentResult_, err error) {
	var _args BackendServiceSubmitTasksArgs
	_args.Tasks = tasks
	var _result BackendServiceSubmitTasksResult
	if err = p.Client_().Call(ctx, "submit_tasks", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) MakeSnapshot(ctx context.Context, snapshotRequest *agentservice.TSnapshotRequest) (r *agentservice.TAgentResult_, err error) {
	var _args BackendServiceMakeSnapshotArgs
	_args.SnapshotRequest = snapshotRequest
	var _result BackendServiceMakeSnapshotResult
	if err = p.Client_().Call(ctx, "make_snapshot", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) ReleaseSnapshot(ctx context.Context, snapshotPath string) (r *agentservice.TAgentResult_, err error) {
	var _args BackendServiceReleaseSnapshotArgs
	_args.SnapshotPath = snapshotPath
	var _result BackendServiceReleaseSnapshotResult
	if err = p.Client_().Call(ctx, "release_snapshot", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) PublishClusterState(ctx context.Context, request *agentservice.TAgentPublishRequest) (r *agentservice.TAgentResult_, err error) {
	var _args BackendServicePublishClusterStateArgs
	_args.Request = request
	var _result BackendServicePublishClusterStateResult
	if err = p.Client_().Call(ctx, "publish_cluster_state", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) SubmitExportTask(ctx context.Context, request *TExportTaskRequest) (r *status.TStatus, err error) {
	var _args BackendServiceSubmitExportTaskArgs
	_args.Request = request
	var _result BackendServiceSubmitExportTaskResult
	if err = p.Client_().Call(ctx, "submit_export_task", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) GetExportStatus(ctx context.Context, taskId *types.TUniqueId) (r *palointernalservice.TExportStatusResult_, err error) {
	var _args BackendServiceGetExportStatusArgs
	_args.TaskId = taskId
	var _result BackendServiceGetExportStatusResult
	if err = p.Client_().Call(ctx, "get_export_status", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) EraseExportTask(ctx context.Context, taskId *types.TUniqueId) (r *status.TStatus, err error) {
	var _args BackendServiceEraseExportTaskArgs
	_args.TaskId = taskId
	var _result BackendServiceEraseExportTaskResult
	if err = p.Client_().Call(ctx, "erase_export_task", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) GetTabletStat(ctx context.Context) (r *TTabletStatResult_, err error) {
	var _args BackendServiceGetTabletStatArgs
	var _result BackendServiceGetTabletStatResult
	if err = p.Client_().Call(ctx, "get_tablet_stat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) GetTrashUsedCapacity(ctx context.Context) (r int64, err error) {
	var _args BackendServiceGetTrashUsedCapacityArgs
	var _result BackendServiceGetTrashUsedCapacityResult
	if err = p.Client_().Call(ctx, "get_trash_used_capacity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) GetDiskTrashUsedCapacity(ctx context.Context) (r []*TDiskTrashInfo, err error) {
	var _args BackendServiceGetDiskTrashUsedCapacityArgs
	var _result BackendServiceGetDiskTrashUsedCapacityResult
	if err = p.Client_().Call(ctx, "get_disk_trash_used_capacity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) SubmitRoutineLoadTask(ctx context.Context, tasks []*TRoutineLoadTask) (r *status.TStatus, err error) {
	var _args BackendServiceSubmitRoutineLoadTaskArgs
	_args.Tasks = tasks
	var _result BackendServiceSubmitRoutineLoadTaskResult
	if err = p.Client_().Call(ctx, "submit_routine_load_task", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) OpenScanner(ctx context.Context, params *dorisexternalservice.TScanOpenParams) (r *dorisexternalservice.TScanOpenResult_, err error) {
	var _args BackendServiceOpenScannerArgs
	_args.Params = params
	var _result BackendServiceOpenScannerResult
	if err = p.Client_().Call(ctx, "open_scanner", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) GetNext(ctx context.Context, params *dorisexternalservice.TScanNextBatchParams) (r *dorisexternalservice.TScanBatchResult_, err error) {
	var _args BackendServiceGetNextArgs
	_args.Params = params
	var _result BackendServiceGetNextResult
	if err = p.Client_().Call(ctx, "get_next", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) CloseScanner(ctx context.Context, params *dorisexternalservice.TScanCloseParams) (r *dorisexternalservice.TScanCloseResult_, err error) {
	var _args BackendServiceCloseScannerArgs
	_args.Params = params
	var _result BackendServiceCloseScannerResult
	if err = p.Client_().Call(ctx, "close_scanner", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) GetStreamLoadRecord(ctx context.Context, lastStreamRecordTime int64) (r *TStreamLoadRecordResult_, err error) {
	var _args BackendServiceGetStreamLoadRecordArgs
	_args.LastStreamRecordTime = lastStreamRecordTime
	var _result BackendServiceGetStreamLoadRecordResult
	if err = p.Client_().Call(ctx, "get_stream_load_record", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) CleanTrash(ctx context.Context) (err error) {
	var _args BackendServiceCleanTrashArgs
	if err = p.Client_().Call(ctx, "clean_trash", &_args, nil); err != nil {
		return
	}
	return nil
}
func (p *BackendServiceClient) CheckStorageFormat(ctx context.Context) (r *TCheckStorageFormatResult_, err error) {
	var _args BackendServiceCheckStorageFormatArgs
	var _result BackendServiceCheckStorageFormatResult
	if err = p.Client_().Call(ctx, "check_storage_format", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) IngestBinlog(ctx context.Context, ingestBinlogRequest *TIngestBinlogRequest) (r *TIngestBinlogResult_, err error) {
	var _args BackendServiceIngestBinlogArgs
	_args.IngestBinlogRequest = ingestBinlogRequest
	var _result BackendServiceIngestBinlogResult
	if err = p.Client_().Call(ctx, "ingest_binlog", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) QueryIngestBinlog(ctx context.Context, queryIngestBinlogRequest *TQueryIngestBinlogRequest) (r *TQueryIngestBinlogResult_, err error) {
	var _args BackendServiceQueryIngestBinlogArgs
	_args.QueryIngestBinlogRequest = queryIngestBinlogRequest
	var _result BackendServiceQueryIngestBinlogResult
	if err = p.Client_().Call(ctx, "query_ingest_binlog", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BackendServiceClient) PublishTopicInfo(ctx context.Context, topicRequest *TPublishTopicRequest) (r *TPublishTopicResult_, err error) {
	var _args BackendServicePublishTopicInfoArgs
	_args.TopicRequest = topicRequest
	var _result BackendServicePublishTopicInfoResult
	if err = p.Client_().Call(ctx, "publish_topic_info", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type BackendServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BackendService
}

func (p *BackendServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BackendServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BackendServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBackendServiceProcessor(handler BackendService) *BackendServiceProcessor {
	self := &BackendServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("exec_plan_fragment", &backendServiceProcessorExecPlanFragment{handler: handler})
	self.AddToProcessorMap("cancel_plan_fragment", &backendServiceProcessorCancelPlanFragment{handler: handler})
	self.AddToProcessorMap("transmit_data", &backendServiceProcessorTransmitData{handler: handler})
	self.AddToProcessorMap("submit_tasks", &backendServiceProcessorSubmitTasks{handler: handler})
	self.AddToProcessorMap("make_snapshot", &backendServiceProcessorMakeSnapshot{handler: handler})
	self.AddToProcessorMap("release_snapshot", &backendServiceProcessorReleaseSnapshot{handler: handler})
	self.AddToProcessorMap("publish_cluster_state", &backendServiceProcessorPublishClusterState{handler: handler})
	self.AddToProcessorMap("submit_export_task", &backendServiceProcessorSubmitExportTask{handler: handler})
	self.AddToProcessorMap("get_export_status", &backendServiceProcessorGetExportStatus{handler: handler})
	self.AddToProcessorMap("erase_export_task", &backendServiceProcessorEraseExportTask{handler: handler})
	self.AddToProcessorMap("get_tablet_stat", &backendServiceProcessorGetTabletStat{handler: handler})
	self.AddToProcessorMap("get_trash_used_capacity", &backendServiceProcessorGetTrashUsedCapacity{handler: handler})
	self.AddToProcessorMap("get_disk_trash_used_capacity", &backendServiceProcessorGetDiskTrashUsedCapacity{handler: handler})
	self.AddToProcessorMap("submit_routine_load_task", &backendServiceProcessorSubmitRoutineLoadTask{handler: handler})
	self.AddToProcessorMap("open_scanner", &backendServiceProcessorOpenScanner{handler: handler})
	self.AddToProcessorMap("get_next", &backendServiceProcessorGetNext{handler: handler})
	self.AddToProcessorMap("close_scanner", &backendServiceProcessorCloseScanner{handler: handler})
	self.AddToProcessorMap("get_stream_load_record", &backendServiceProcessorGetStreamLoadRecord{handler: handler})
	self.AddToProcessorMap("clean_trash", &backendServiceProcessorCleanTrash{handler: handler})
	self.AddToProcessorMap("check_storage_format", &backendServiceProcessorCheckStorageFormat{handler: handler})
	self.AddToProcessorMap("ingest_binlog", &backendServiceProcessorIngestBinlog{handler: handler})
	self.AddToProcessorMap("query_ingest_binlog", &backendServiceProcessorQueryIngestBinlog{handler: handler})
	self.AddToProcessorMap("publish_topic_info", &backendServiceProcessorPublishTopicInfo{handler: handler})
	return self
}
func (p *BackendServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type backendServiceProcessorExecPlanFragment struct {
	handler BackendService
}

func (p *backendServiceProcessorExecPlanFragment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceExecPlanFragmentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("exec_plan_fragment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceExecPlanFragmentResult{}
	var retval *palointernalservice.TExecPlanFragmentResult_
	if retval, err2 = p.handler.ExecPlanFragment(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exec_plan_fragment: "+err2.Error())
		oprot.WriteMessageBegin("exec_plan_fragment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("exec_plan_fragment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorCancelPlanFragment struct {
	handler BackendService
}

func (p *backendServiceProcessorCancelPlanFragment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceCancelPlanFragmentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cancel_plan_fragment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceCancelPlanFragmentResult{}
	var retval *palointernalservice.TCancelPlanFragmentResult_
	if retval, err2 = p.handler.CancelPlanFragment(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancel_plan_fragment: "+err2.Error())
		oprot.WriteMessageBegin("cancel_plan_fragment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("cancel_plan_fragment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorTransmitData struct {
	handler BackendService
}

func (p *backendServiceProcessorTransmitData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceTransmitDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("transmit_data", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceTransmitDataResult{}
	var retval *palointernalservice.TTransmitDataResult_
	if retval, err2 = p.handler.TransmitData(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing transmit_data: "+err2.Error())
		oprot.WriteMessageBegin("transmit_data", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("transmit_data", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorSubmitTasks struct {
	handler BackendService
}

func (p *backendServiceProcessorSubmitTasks) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceSubmitTasksArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("submit_tasks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceSubmitTasksResult{}
	var retval *agentservice.TAgentResult_
	if retval, err2 = p.handler.SubmitTasks(ctx, args.Tasks); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing submit_tasks: "+err2.Error())
		oprot.WriteMessageBegin("submit_tasks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("submit_tasks", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorMakeSnapshot struct {
	handler BackendService
}

func (p *backendServiceProcessorMakeSnapshot) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceMakeSnapshotArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("make_snapshot", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceMakeSnapshotResult{}
	var retval *agentservice.TAgentResult_
	if retval, err2 = p.handler.MakeSnapshot(ctx, args.SnapshotRequest); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing make_snapshot: "+err2.Error())
		oprot.WriteMessageBegin("make_snapshot", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("make_snapshot", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorReleaseSnapshot struct {
	handler BackendService
}

func (p *backendServiceProcessorReleaseSnapshot) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceReleaseSnapshotArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("release_snapshot", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceReleaseSnapshotResult{}
	var retval *agentservice.TAgentResult_
	if retval, err2 = p.handler.ReleaseSnapshot(ctx, args.SnapshotPath); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing release_snapshot: "+err2.Error())
		oprot.WriteMessageBegin("release_snapshot", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("release_snapshot", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorPublishClusterState struct {
	handler BackendService
}

func (p *backendServiceProcessorPublishClusterState) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServicePublishClusterStateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("publish_cluster_state", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServicePublishClusterStateResult{}
	var retval *agentservice.TAgentResult_
	if retval, err2 = p.handler.PublishClusterState(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing publish_cluster_state: "+err2.Error())
		oprot.WriteMessageBegin("publish_cluster_state", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("publish_cluster_state", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorSubmitExportTask struct {
	handler BackendService
}

func (p *backendServiceProcessorSubmitExportTask) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceSubmitExportTaskArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("submit_export_task", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceSubmitExportTaskResult{}
	var retval *status.TStatus
	if retval, err2 = p.handler.SubmitExportTask(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing submit_export_task: "+err2.Error())
		oprot.WriteMessageBegin("submit_export_task", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("submit_export_task", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorGetExportStatus struct {
	handler BackendService
}

func (p *backendServiceProcessorGetExportStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceGetExportStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_export_status", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceGetExportStatusResult{}
	var retval *palointernalservice.TExportStatusResult_
	if retval, err2 = p.handler.GetExportStatus(ctx, args.TaskId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_export_status: "+err2.Error())
		oprot.WriteMessageBegin("get_export_status", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_export_status", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorEraseExportTask struct {
	handler BackendService
}

func (p *backendServiceProcessorEraseExportTask) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceEraseExportTaskArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("erase_export_task", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceEraseExportTaskResult{}
	var retval *status.TStatus
	if retval, err2 = p.handler.EraseExportTask(ctx, args.TaskId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing erase_export_task: "+err2.Error())
		oprot.WriteMessageBegin("erase_export_task", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("erase_export_task", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorGetTabletStat struct {
	handler BackendService
}

func (p *backendServiceProcessorGetTabletStat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceGetTabletStatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_tablet_stat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceGetTabletStatResult{}
	var retval *TTabletStatResult_
	if retval, err2 = p.handler.GetTabletStat(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_tablet_stat: "+err2.Error())
		oprot.WriteMessageBegin("get_tablet_stat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_tablet_stat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorGetTrashUsedCapacity struct {
	handler BackendService
}

func (p *backendServiceProcessorGetTrashUsedCapacity) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceGetTrashUsedCapacityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_trash_used_capacity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceGetTrashUsedCapacityResult{}
	var retval int64
	if retval, err2 = p.handler.GetTrashUsedCapacity(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_trash_used_capacity: "+err2.Error())
		oprot.WriteMessageBegin("get_trash_used_capacity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_trash_used_capacity", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorGetDiskTrashUsedCapacity struct {
	handler BackendService
}

func (p *backendServiceProcessorGetDiskTrashUsedCapacity) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceGetDiskTrashUsedCapacityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_disk_trash_used_capacity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceGetDiskTrashUsedCapacityResult{}
	var retval []*TDiskTrashInfo
	if retval, err2 = p.handler.GetDiskTrashUsedCapacity(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_disk_trash_used_capacity: "+err2.Error())
		oprot.WriteMessageBegin("get_disk_trash_used_capacity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_disk_trash_used_capacity", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorSubmitRoutineLoadTask struct {
	handler BackendService
}

func (p *backendServiceProcessorSubmitRoutineLoadTask) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceSubmitRoutineLoadTaskArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("submit_routine_load_task", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceSubmitRoutineLoadTaskResult{}
	var retval *status.TStatus
	if retval, err2 = p.handler.SubmitRoutineLoadTask(ctx, args.Tasks); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing submit_routine_load_task: "+err2.Error())
		oprot.WriteMessageBegin("submit_routine_load_task", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("submit_routine_load_task", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorOpenScanner struct {
	handler BackendService
}

func (p *backendServiceProcessorOpenScanner) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceOpenScannerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("open_scanner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceOpenScannerResult{}
	var retval *dorisexternalservice.TScanOpenResult_
	if retval, err2 = p.handler.OpenScanner(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing open_scanner: "+err2.Error())
		oprot.WriteMessageBegin("open_scanner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("open_scanner", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorGetNext struct {
	handler BackendService
}

func (p *backendServiceProcessorGetNext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceGetNextArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_next", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceGetNextResult{}
	var retval *dorisexternalservice.TScanBatchResult_
	if retval, err2 = p.handler.GetNext(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_next: "+err2.Error())
		oprot.WriteMessageBegin("get_next", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_next", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorCloseScanner struct {
	handler BackendService
}

func (p *backendServiceProcessorCloseScanner) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceCloseScannerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("close_scanner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceCloseScannerResult{}
	var retval *dorisexternalservice.TScanCloseResult_
	if retval, err2 = p.handler.CloseScanner(ctx, args.Params); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing close_scanner: "+err2.Error())
		oprot.WriteMessageBegin("close_scanner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("close_scanner", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorGetStreamLoadRecord struct {
	handler BackendService
}

func (p *backendServiceProcessorGetStreamLoadRecord) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceGetStreamLoadRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_stream_load_record", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceGetStreamLoadRecordResult{}
	var retval *TStreamLoadRecordResult_
	if retval, err2 = p.handler.GetStreamLoadRecord(ctx, args.LastStreamRecordTime); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_stream_load_record: "+err2.Error())
		oprot.WriteMessageBegin("get_stream_load_record", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_stream_load_record", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorCleanTrash struct {
	handler BackendService
}

func (p *backendServiceProcessorCleanTrash) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceCleanTrashArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.CleanTrash(ctx); err2 != nil {
		return true, err2
	}
	return true, nil
}

type backendServiceProcessorCheckStorageFormat struct {
	handler BackendService
}

func (p *backendServiceProcessorCheckStorageFormat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceCheckStorageFormatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("check_storage_format", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceCheckStorageFormatResult{}
	var retval *TCheckStorageFormatResult_
	if retval, err2 = p.handler.CheckStorageFormat(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing check_storage_format: "+err2.Error())
		oprot.WriteMessageBegin("check_storage_format", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("check_storage_format", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorIngestBinlog struct {
	handler BackendService
}

func (p *backendServiceProcessorIngestBinlog) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceIngestBinlogArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ingest_binlog", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceIngestBinlogResult{}
	var retval *TIngestBinlogResult_
	if retval, err2 = p.handler.IngestBinlog(ctx, args.IngestBinlogRequest); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ingest_binlog: "+err2.Error())
		oprot.WriteMessageBegin("ingest_binlog", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ingest_binlog", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorQueryIngestBinlog struct {
	handler BackendService
}

func (p *backendServiceProcessorQueryIngestBinlog) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServiceQueryIngestBinlogArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("query_ingest_binlog", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServiceQueryIngestBinlogResult{}
	var retval *TQueryIngestBinlogResult_
	if retval, err2 = p.handler.QueryIngestBinlog(ctx, args.QueryIngestBinlogRequest); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_ingest_binlog: "+err2.Error())
		oprot.WriteMessageBegin("query_ingest_binlog", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("query_ingest_binlog", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type backendServiceProcessorPublishTopicInfo struct {
	handler BackendService
}

func (p *backendServiceProcessorPublishTopicInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BackendServicePublishTopicInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("publish_topic_info", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BackendServicePublishTopicInfoResult{}
	var retval *TPublishTopicResult_
	if retval, err2 = p.handler.PublishTopicInfo(ctx, args.TopicRequest); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing publish_topic_info: "+err2.Error())
		oprot.WriteMessageBegin("publish_topic_info", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("publish_topic_info", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type BackendServiceExecPlanFragmentArgs struct {
	Params *palointernalservice.TExecPlanFragmentParams `thrift:"params,1" frugal:"1,default,palointernalservice.TExecPlanFragmentParams" json:"params"`
}

func NewBackendServiceExecPlanFragmentArgs() *BackendServiceExecPlanFragmentArgs {
	return &BackendServiceExecPlanFragmentArgs{}
}

func (p *BackendServiceExecPlanFragmentArgs) InitDefault() {
	*p = BackendServiceExecPlanFragmentArgs{}
}

var BackendServiceExecPlanFragmentArgs_Params_DEFAULT *palointernalservice.TExecPlanFragmentParams

func (p *BackendServiceExecPlanFragmentArgs) GetParams() (v *palointernalservice.TExecPlanFragmentParams) {
	if !p.IsSetParams() {
		return BackendServiceExecPlanFragmentArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *BackendServiceExecPlanFragmentArgs) SetParams(val *palointernalservice.TExecPlanFragmentParams) {
	p.Params = val
}

var fieldIDToName_BackendServiceExecPlanFragmentArgs = map[int16]string{
	1: "params",
}

func (p *BackendServiceExecPlanFragmentArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *BackendServiceExecPlanFragmentArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceExecPlanFragmentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceExecPlanFragmentArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Params = palointernalservice.NewTExecPlanFragmentParams()
	if err := p.Params.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceExecPlanFragmentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("exec_plan_fragment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceExecPlanFragmentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BackendServiceExecPlanFragmentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceExecPlanFragmentArgs(%+v)", *p)
}

func (p *BackendServiceExecPlanFragmentArgs) DeepEqual(ano *BackendServiceExecPlanFragmentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *BackendServiceExecPlanFragmentArgs) Field1DeepEqual(src *palointernalservice.TExecPlanFragmentParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceExecPlanFragmentResult struct {
	Success *palointernalservice.TExecPlanFragmentResult_ `thrift:"success,0,optional" frugal:"0,optional,palointernalservice.TExecPlanFragmentResult_" json:"success,omitempty"`
}

func NewBackendServiceExecPlanFragmentResult() *BackendServiceExecPlanFragmentResult {
	return &BackendServiceExecPlanFragmentResult{}
}

func (p *BackendServiceExecPlanFragmentResult) InitDefault() {
	*p = BackendServiceExecPlanFragmentResult{}
}

var BackendServiceExecPlanFragmentResult_Success_DEFAULT *palointernalservice.TExecPlanFragmentResult_

func (p *BackendServiceExecPlanFragmentResult) GetSuccess() (v *palointernalservice.TExecPlanFragmentResult_) {
	if !p.IsSetSuccess() {
		return BackendServiceExecPlanFragmentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceExecPlanFragmentResult) SetSuccess(x interface{}) {
	p.Success = x.(*palointernalservice.TExecPlanFragmentResult_)
}

var fieldIDToName_BackendServiceExecPlanFragmentResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceExecPlanFragmentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceExecPlanFragmentResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceExecPlanFragmentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceExecPlanFragmentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = palointernalservice.NewTExecPlanFragmentResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceExecPlanFragmentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("exec_plan_fragment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceExecPlanFragmentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceExecPlanFragmentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceExecPlanFragmentResult(%+v)", *p)
}

func (p *BackendServiceExecPlanFragmentResult) DeepEqual(ano *BackendServiceExecPlanFragmentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceExecPlanFragmentResult) Field0DeepEqual(src *palointernalservice.TExecPlanFragmentResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceCancelPlanFragmentArgs struct {
	Params *palointernalservice.TCancelPlanFragmentParams `thrift:"params,1" frugal:"1,default,palointernalservice.TCancelPlanFragmentParams" json:"params"`
}

func NewBackendServiceCancelPlanFragmentArgs() *BackendServiceCancelPlanFragmentArgs {
	return &BackendServiceCancelPlanFragmentArgs{}
}

func (p *BackendServiceCancelPlanFragmentArgs) InitDefault() {
	*p = BackendServiceCancelPlanFragmentArgs{}
}

var BackendServiceCancelPlanFragmentArgs_Params_DEFAULT *palointernalservice.TCancelPlanFragmentParams

func (p *BackendServiceCancelPlanFragmentArgs) GetParams() (v *palointernalservice.TCancelPlanFragmentParams) {
	if !p.IsSetParams() {
		return BackendServiceCancelPlanFragmentArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *BackendServiceCancelPlanFragmentArgs) SetParams(val *palointernalservice.TCancelPlanFragmentParams) {
	p.Params = val
}

var fieldIDToName_BackendServiceCancelPlanFragmentArgs = map[int16]string{
	1: "params",
}

func (p *BackendServiceCancelPlanFragmentArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *BackendServiceCancelPlanFragmentArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceCancelPlanFragmentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceCancelPlanFragmentArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Params = palointernalservice.NewTCancelPlanFragmentParams()
	if err := p.Params.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceCancelPlanFragmentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("cancel_plan_fragment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceCancelPlanFragmentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BackendServiceCancelPlanFragmentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceCancelPlanFragmentArgs(%+v)", *p)
}

func (p *BackendServiceCancelPlanFragmentArgs) DeepEqual(ano *BackendServiceCancelPlanFragmentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *BackendServiceCancelPlanFragmentArgs) Field1DeepEqual(src *palointernalservice.TCancelPlanFragmentParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceCancelPlanFragmentResult struct {
	Success *palointernalservice.TCancelPlanFragmentResult_ `thrift:"success,0,optional" frugal:"0,optional,palointernalservice.TCancelPlanFragmentResult_" json:"success,omitempty"`
}

func NewBackendServiceCancelPlanFragmentResult() *BackendServiceCancelPlanFragmentResult {
	return &BackendServiceCancelPlanFragmentResult{}
}

func (p *BackendServiceCancelPlanFragmentResult) InitDefault() {
	*p = BackendServiceCancelPlanFragmentResult{}
}

var BackendServiceCancelPlanFragmentResult_Success_DEFAULT *palointernalservice.TCancelPlanFragmentResult_

func (p *BackendServiceCancelPlanFragmentResult) GetSuccess() (v *palointernalservice.TCancelPlanFragmentResult_) {
	if !p.IsSetSuccess() {
		return BackendServiceCancelPlanFragmentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceCancelPlanFragmentResult) SetSuccess(x interface{}) {
	p.Success = x.(*palointernalservice.TCancelPlanFragmentResult_)
}

var fieldIDToName_BackendServiceCancelPlanFragmentResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceCancelPlanFragmentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceCancelPlanFragmentResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceCancelPlanFragmentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceCancelPlanFragmentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = palointernalservice.NewTCancelPlanFragmentResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceCancelPlanFragmentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("cancel_plan_fragment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceCancelPlanFragmentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceCancelPlanFragmentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceCancelPlanFragmentResult(%+v)", *p)
}

func (p *BackendServiceCancelPlanFragmentResult) DeepEqual(ano *BackendServiceCancelPlanFragmentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceCancelPlanFragmentResult) Field0DeepEqual(src *palointernalservice.TCancelPlanFragmentResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceTransmitDataArgs struct {
	Params *palointernalservice.TTransmitDataParams `thrift:"params,1" frugal:"1,default,palointernalservice.TTransmitDataParams" json:"params"`
}

func NewBackendServiceTransmitDataArgs() *BackendServiceTransmitDataArgs {
	return &BackendServiceTransmitDataArgs{}
}

func (p *BackendServiceTransmitDataArgs) InitDefault() {
	*p = BackendServiceTransmitDataArgs{}
}

var BackendServiceTransmitDataArgs_Params_DEFAULT *palointernalservice.TTransmitDataParams

func (p *BackendServiceTransmitDataArgs) GetParams() (v *palointernalservice.TTransmitDataParams) {
	if !p.IsSetParams() {
		return BackendServiceTransmitDataArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *BackendServiceTransmitDataArgs) SetParams(val *palointernalservice.TTransmitDataParams) {
	p.Params = val
}

var fieldIDToName_BackendServiceTransmitDataArgs = map[int16]string{
	1: "params",
}

func (p *BackendServiceTransmitDataArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *BackendServiceTransmitDataArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceTransmitDataArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceTransmitDataArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Params = palointernalservice.NewTTransmitDataParams()
	if err := p.Params.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceTransmitDataArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("transmit_data_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceTransmitDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BackendServiceTransmitDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceTransmitDataArgs(%+v)", *p)
}

func (p *BackendServiceTransmitDataArgs) DeepEqual(ano *BackendServiceTransmitDataArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *BackendServiceTransmitDataArgs) Field1DeepEqual(src *palointernalservice.TTransmitDataParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceTransmitDataResult struct {
	Success *palointernalservice.TTransmitDataResult_ `thrift:"success,0,optional" frugal:"0,optional,palointernalservice.TTransmitDataResult_" json:"success,omitempty"`
}

func NewBackendServiceTransmitDataResult() *BackendServiceTransmitDataResult {
	return &BackendServiceTransmitDataResult{}
}

func (p *BackendServiceTransmitDataResult) InitDefault() {
	*p = BackendServiceTransmitDataResult{}
}

var BackendServiceTransmitDataResult_Success_DEFAULT *palointernalservice.TTransmitDataResult_

func (p *BackendServiceTransmitDataResult) GetSuccess() (v *palointernalservice.TTransmitDataResult_) {
	if !p.IsSetSuccess() {
		return BackendServiceTransmitDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceTransmitDataResult) SetSuccess(x interface{}) {
	p.Success = x.(*palointernalservice.TTransmitDataResult_)
}

var fieldIDToName_BackendServiceTransmitDataResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceTransmitDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceTransmitDataResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceTransmitDataResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceTransmitDataResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = palointernalservice.NewTTransmitDataResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceTransmitDataResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("transmit_data_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceTransmitDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceTransmitDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceTransmitDataResult(%+v)", *p)
}

func (p *BackendServiceTransmitDataResult) DeepEqual(ano *BackendServiceTransmitDataResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceTransmitDataResult) Field0DeepEqual(src *palointernalservice.TTransmitDataResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceSubmitTasksArgs struct {
	Tasks []*agentservice.TAgentTaskRequest `thrift:"tasks,1" frugal:"1,default,list<agentservice.TAgentTaskRequest>" json:"tasks"`
}

func NewBackendServiceSubmitTasksArgs() *BackendServiceSubmitTasksArgs {
	return &BackendServiceSubmitTasksArgs{}
}

func (p *BackendServiceSubmitTasksArgs) InitDefault() {
	*p = BackendServiceSubmitTasksArgs{}
}

func (p *BackendServiceSubmitTasksArgs) GetTasks() (v []*agentservice.TAgentTaskRequest) {
	return p.Tasks
}
func (p *BackendServiceSubmitTasksArgs) SetTasks(val []*agentservice.TAgentTaskRequest) {
	p.Tasks = val
}

var fieldIDToName_BackendServiceSubmitTasksArgs = map[int16]string{
	1: "tasks",
}

func (p *BackendServiceSubmitTasksArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceSubmitTasksArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceSubmitTasksArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Tasks = make([]*agentservice.TAgentTaskRequest, 0, size)
	for i := 0; i < size; i++ {
		_elem := agentservice.NewTAgentTaskRequest()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Tasks = append(p.Tasks, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceSubmitTasksArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("submit_tasks_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceSubmitTasksArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tasks", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tasks)); err != nil {
		return err
	}
	for _, v := range p.Tasks {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BackendServiceSubmitTasksArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceSubmitTasksArgs(%+v)", *p)
}

func (p *BackendServiceSubmitTasksArgs) DeepEqual(ano *BackendServiceSubmitTasksArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Tasks) {
		return false
	}
	return true
}

func (p *BackendServiceSubmitTasksArgs) Field1DeepEqual(src []*agentservice.TAgentTaskRequest) bool {

	if len(p.Tasks) != len(src) {
		return false
	}
	for i, v := range p.Tasks {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type BackendServiceSubmitTasksResult struct {
	Success *agentservice.TAgentResult_ `thrift:"success,0,optional" frugal:"0,optional,agentservice.TAgentResult_" json:"success,omitempty"`
}

func NewBackendServiceSubmitTasksResult() *BackendServiceSubmitTasksResult {
	return &BackendServiceSubmitTasksResult{}
}

func (p *BackendServiceSubmitTasksResult) InitDefault() {
	*p = BackendServiceSubmitTasksResult{}
}

var BackendServiceSubmitTasksResult_Success_DEFAULT *agentservice.TAgentResult_

func (p *BackendServiceSubmitTasksResult) GetSuccess() (v *agentservice.TAgentResult_) {
	if !p.IsSetSuccess() {
		return BackendServiceSubmitTasksResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceSubmitTasksResult) SetSuccess(x interface{}) {
	p.Success = x.(*agentservice.TAgentResult_)
}

var fieldIDToName_BackendServiceSubmitTasksResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceSubmitTasksResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceSubmitTasksResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceSubmitTasksResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceSubmitTasksResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = agentservice.NewTAgentResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceSubmitTasksResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("submit_tasks_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceSubmitTasksResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceSubmitTasksResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceSubmitTasksResult(%+v)", *p)
}

func (p *BackendServiceSubmitTasksResult) DeepEqual(ano *BackendServiceSubmitTasksResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceSubmitTasksResult) Field0DeepEqual(src *agentservice.TAgentResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceMakeSnapshotArgs struct {
	SnapshotRequest *agentservice.TSnapshotRequest `thrift:"snapshot_request,1" frugal:"1,default,agentservice.TSnapshotRequest" json:"snapshot_request"`
}

func NewBackendServiceMakeSnapshotArgs() *BackendServiceMakeSnapshotArgs {
	return &BackendServiceMakeSnapshotArgs{}
}

func (p *BackendServiceMakeSnapshotArgs) InitDefault() {
	*p = BackendServiceMakeSnapshotArgs{}
}

var BackendServiceMakeSnapshotArgs_SnapshotRequest_DEFAULT *agentservice.TSnapshotRequest

func (p *BackendServiceMakeSnapshotArgs) GetSnapshotRequest() (v *agentservice.TSnapshotRequest) {
	if !p.IsSetSnapshotRequest() {
		return BackendServiceMakeSnapshotArgs_SnapshotRequest_DEFAULT
	}
	return p.SnapshotRequest
}
func (p *BackendServiceMakeSnapshotArgs) SetSnapshotRequest(val *agentservice.TSnapshotRequest) {
	p.SnapshotRequest = val
}

var fieldIDToName_BackendServiceMakeSnapshotArgs = map[int16]string{
	1: "snapshot_request",
}

func (p *BackendServiceMakeSnapshotArgs) IsSetSnapshotRequest() bool {
	return p.SnapshotRequest != nil
}

func (p *BackendServiceMakeSnapshotArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceMakeSnapshotArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceMakeSnapshotArgs) ReadField1(iprot thrift.TProtocol) error {
	p.SnapshotRequest = agentservice.NewTSnapshotRequest()
	if err := p.SnapshotRequest.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceMakeSnapshotArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("make_snapshot_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceMakeSnapshotArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("snapshot_request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.SnapshotRequest.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BackendServiceMakeSnapshotArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceMakeSnapshotArgs(%+v)", *p)
}

func (p *BackendServiceMakeSnapshotArgs) DeepEqual(ano *BackendServiceMakeSnapshotArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SnapshotRequest) {
		return false
	}
	return true
}

func (p *BackendServiceMakeSnapshotArgs) Field1DeepEqual(src *agentservice.TSnapshotRequest) bool {

	if !p.SnapshotRequest.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceMakeSnapshotResult struct {
	Success *agentservice.TAgentResult_ `thrift:"success,0,optional" frugal:"0,optional,agentservice.TAgentResult_" json:"success,omitempty"`
}

func NewBackendServiceMakeSnapshotResult() *BackendServiceMakeSnapshotResult {
	return &BackendServiceMakeSnapshotResult{}
}

func (p *BackendServiceMakeSnapshotResult) InitDefault() {
	*p = BackendServiceMakeSnapshotResult{}
}

var BackendServiceMakeSnapshotResult_Success_DEFAULT *agentservice.TAgentResult_

func (p *BackendServiceMakeSnapshotResult) GetSuccess() (v *agentservice.TAgentResult_) {
	if !p.IsSetSuccess() {
		return BackendServiceMakeSnapshotResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceMakeSnapshotResult) SetSuccess(x interface{}) {
	p.Success = x.(*agentservice.TAgentResult_)
}

var fieldIDToName_BackendServiceMakeSnapshotResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceMakeSnapshotResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceMakeSnapshotResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceMakeSnapshotResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceMakeSnapshotResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = agentservice.NewTAgentResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceMakeSnapshotResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("make_snapshot_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceMakeSnapshotResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceMakeSnapshotResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceMakeSnapshotResult(%+v)", *p)
}

func (p *BackendServiceMakeSnapshotResult) DeepEqual(ano *BackendServiceMakeSnapshotResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceMakeSnapshotResult) Field0DeepEqual(src *agentservice.TAgentResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceReleaseSnapshotArgs struct {
	SnapshotPath string `thrift:"snapshot_path,1" frugal:"1,default,string" json:"snapshot_path"`
}

func NewBackendServiceReleaseSnapshotArgs() *BackendServiceReleaseSnapshotArgs {
	return &BackendServiceReleaseSnapshotArgs{}
}

func (p *BackendServiceReleaseSnapshotArgs) InitDefault() {
	*p = BackendServiceReleaseSnapshotArgs{}
}

func (p *BackendServiceReleaseSnapshotArgs) GetSnapshotPath() (v string) {
	return p.SnapshotPath
}
func (p *BackendServiceReleaseSnapshotArgs) SetSnapshotPath(val string) {
	p.SnapshotPath = val
}

var fieldIDToName_BackendServiceReleaseSnapshotArgs = map[int16]string{
	1: "snapshot_path",
}

func (p *BackendServiceReleaseSnapshotArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceReleaseSnapshotArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceReleaseSnapshotArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SnapshotPath = v
	}
	return nil
}

func (p *BackendServiceReleaseSnapshotArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("release_snapshot_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceReleaseSnapshotArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("snapshot_path", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SnapshotPath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BackendServiceReleaseSnapshotArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceReleaseSnapshotArgs(%+v)", *p)
}

func (p *BackendServiceReleaseSnapshotArgs) DeepEqual(ano *BackendServiceReleaseSnapshotArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SnapshotPath) {
		return false
	}
	return true
}

func (p *BackendServiceReleaseSnapshotArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.SnapshotPath, src) != 0 {
		return false
	}
	return true
}

type BackendServiceReleaseSnapshotResult struct {
	Success *agentservice.TAgentResult_ `thrift:"success,0,optional" frugal:"0,optional,agentservice.TAgentResult_" json:"success,omitempty"`
}

func NewBackendServiceReleaseSnapshotResult() *BackendServiceReleaseSnapshotResult {
	return &BackendServiceReleaseSnapshotResult{}
}

func (p *BackendServiceReleaseSnapshotResult) InitDefault() {
	*p = BackendServiceReleaseSnapshotResult{}
}

var BackendServiceReleaseSnapshotResult_Success_DEFAULT *agentservice.TAgentResult_

func (p *BackendServiceReleaseSnapshotResult) GetSuccess() (v *agentservice.TAgentResult_) {
	if !p.IsSetSuccess() {
		return BackendServiceReleaseSnapshotResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceReleaseSnapshotResult) SetSuccess(x interface{}) {
	p.Success = x.(*agentservice.TAgentResult_)
}

var fieldIDToName_BackendServiceReleaseSnapshotResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceReleaseSnapshotResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceReleaseSnapshotResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceReleaseSnapshotResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceReleaseSnapshotResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = agentservice.NewTAgentResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceReleaseSnapshotResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("release_snapshot_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceReleaseSnapshotResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceReleaseSnapshotResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceReleaseSnapshotResult(%+v)", *p)
}

func (p *BackendServiceReleaseSnapshotResult) DeepEqual(ano *BackendServiceReleaseSnapshotResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceReleaseSnapshotResult) Field0DeepEqual(src *agentservice.TAgentResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServicePublishClusterStateArgs struct {
	Request *agentservice.TAgentPublishRequest `thrift:"request,1" frugal:"1,default,agentservice.TAgentPublishRequest" json:"request"`
}

func NewBackendServicePublishClusterStateArgs() *BackendServicePublishClusterStateArgs {
	return &BackendServicePublishClusterStateArgs{}
}

func (p *BackendServicePublishClusterStateArgs) InitDefault() {
	*p = BackendServicePublishClusterStateArgs{}
}

var BackendServicePublishClusterStateArgs_Request_DEFAULT *agentservice.TAgentPublishRequest

func (p *BackendServicePublishClusterStateArgs) GetRequest() (v *agentservice.TAgentPublishRequest) {
	if !p.IsSetRequest() {
		return BackendServicePublishClusterStateArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *BackendServicePublishClusterStateArgs) SetRequest(val *agentservice.TAgentPublishRequest) {
	p.Request = val
}

var fieldIDToName_BackendServicePublishClusterStateArgs = map[int16]string{
	1: "request",
}

func (p *BackendServicePublishClusterStateArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BackendServicePublishClusterStateArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServicePublishClusterStateArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServicePublishClusterStateArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = agentservice.NewTAgentPublishRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServicePublishClusterStateArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("publish_cluster_state_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServicePublishClusterStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BackendServicePublishClusterStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServicePublishClusterStateArgs(%+v)", *p)
}

func (p *BackendServicePublishClusterStateArgs) DeepEqual(ano *BackendServicePublishClusterStateArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *BackendServicePublishClusterStateArgs) Field1DeepEqual(src *agentservice.TAgentPublishRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServicePublishClusterStateResult struct {
	Success *agentservice.TAgentResult_ `thrift:"success,0,optional" frugal:"0,optional,agentservice.TAgentResult_" json:"success,omitempty"`
}

func NewBackendServicePublishClusterStateResult() *BackendServicePublishClusterStateResult {
	return &BackendServicePublishClusterStateResult{}
}

func (p *BackendServicePublishClusterStateResult) InitDefault() {
	*p = BackendServicePublishClusterStateResult{}
}

var BackendServicePublishClusterStateResult_Success_DEFAULT *agentservice.TAgentResult_

func (p *BackendServicePublishClusterStateResult) GetSuccess() (v *agentservice.TAgentResult_) {
	if !p.IsSetSuccess() {
		return BackendServicePublishClusterStateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServicePublishClusterStateResult) SetSuccess(x interface{}) {
	p.Success = x.(*agentservice.TAgentResult_)
}

var fieldIDToName_BackendServicePublishClusterStateResult = map[int16]string{
	0: "success",
}

func (p *BackendServicePublishClusterStateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServicePublishClusterStateResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServicePublishClusterStateResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServicePublishClusterStateResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = agentservice.NewTAgentResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServicePublishClusterStateResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("publish_cluster_state_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServicePublishClusterStateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServicePublishClusterStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServicePublishClusterStateResult(%+v)", *p)
}

func (p *BackendServicePublishClusterStateResult) DeepEqual(ano *BackendServicePublishClusterStateResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServicePublishClusterStateResult) Field0DeepEqual(src *agentservice.TAgentResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceSubmitExportTaskArgs struct {
	Request *TExportTaskRequest `thrift:"request,1" frugal:"1,default,TExportTaskRequest" json:"request"`
}

func NewBackendServiceSubmitExportTaskArgs() *BackendServiceSubmitExportTaskArgs {
	return &BackendServiceSubmitExportTaskArgs{}
}

func (p *BackendServiceSubmitExportTaskArgs) InitDefault() {
	*p = BackendServiceSubmitExportTaskArgs{}
}

var BackendServiceSubmitExportTaskArgs_Request_DEFAULT *TExportTaskRequest

func (p *BackendServiceSubmitExportTaskArgs) GetRequest() (v *TExportTaskRequest) {
	if !p.IsSetRequest() {
		return BackendServiceSubmitExportTaskArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *BackendServiceSubmitExportTaskArgs) SetRequest(val *TExportTaskRequest) {
	p.Request = val
}

var fieldIDToName_BackendServiceSubmitExportTaskArgs = map[int16]string{
	1: "request",
}

func (p *BackendServiceSubmitExportTaskArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *BackendServiceSubmitExportTaskArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceSubmitExportTaskArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceSubmitExportTaskArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewTExportTaskRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceSubmitExportTaskArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("submit_export_task_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceSubmitExportTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BackendServiceSubmitExportTaskArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceSubmitExportTaskArgs(%+v)", *p)
}

func (p *BackendServiceSubmitExportTaskArgs) DeepEqual(ano *BackendServiceSubmitExportTaskArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *BackendServiceSubmitExportTaskArgs) Field1DeepEqual(src *TExportTaskRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceSubmitExportTaskResult struct {
	Success *status.TStatus `thrift:"success,0,optional" frugal:"0,optional,status.TStatus" json:"success,omitempty"`
}

func NewBackendServiceSubmitExportTaskResult() *BackendServiceSubmitExportTaskResult {
	return &BackendServiceSubmitExportTaskResult{}
}

func (p *BackendServiceSubmitExportTaskResult) InitDefault() {
	*p = BackendServiceSubmitExportTaskResult{}
}

var BackendServiceSubmitExportTaskResult_Success_DEFAULT *status.TStatus

func (p *BackendServiceSubmitExportTaskResult) GetSuccess() (v *status.TStatus) {
	if !p.IsSetSuccess() {
		return BackendServiceSubmitExportTaskResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceSubmitExportTaskResult) SetSuccess(x interface{}) {
	p.Success = x.(*status.TStatus)
}

var fieldIDToName_BackendServiceSubmitExportTaskResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceSubmitExportTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceSubmitExportTaskResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceSubmitExportTaskResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceSubmitExportTaskResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = status.NewTStatus()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceSubmitExportTaskResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("submit_export_task_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceSubmitExportTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceSubmitExportTaskResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceSubmitExportTaskResult(%+v)", *p)
}

func (p *BackendServiceSubmitExportTaskResult) DeepEqual(ano *BackendServiceSubmitExportTaskResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceSubmitExportTaskResult) Field0DeepEqual(src *status.TStatus) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceGetExportStatusArgs struct {
	TaskId *types.TUniqueId `thrift:"task_id,1" frugal:"1,default,types.TUniqueId" json:"task_id"`
}

func NewBackendServiceGetExportStatusArgs() *BackendServiceGetExportStatusArgs {
	return &BackendServiceGetExportStatusArgs{}
}

func (p *BackendServiceGetExportStatusArgs) InitDefault() {
	*p = BackendServiceGetExportStatusArgs{}
}

var BackendServiceGetExportStatusArgs_TaskId_DEFAULT *types.TUniqueId

func (p *BackendServiceGetExportStatusArgs) GetTaskId() (v *types.TUniqueId) {
	if !p.IsSetTaskId() {
		return BackendServiceGetExportStatusArgs_TaskId_DEFAULT
	}
	return p.TaskId
}
func (p *BackendServiceGetExportStatusArgs) SetTaskId(val *types.TUniqueId) {
	p.TaskId = val
}

var fieldIDToName_BackendServiceGetExportStatusArgs = map[int16]string{
	1: "task_id",
}

func (p *BackendServiceGetExportStatusArgs) IsSetTaskId() bool {
	return p.TaskId != nil
}

func (p *BackendServiceGetExportStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceGetExportStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceGetExportStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	p.TaskId = types.NewTUniqueId()
	if err := p.TaskId.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceGetExportStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("get_export_status_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceGetExportStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_id", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.TaskId.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BackendServiceGetExportStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceGetExportStatusArgs(%+v)", *p)
}

func (p *BackendServiceGetExportStatusArgs) DeepEqual(ano *BackendServiceGetExportStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskId) {
		return false
	}
	return true
}

func (p *BackendServiceGetExportStatusArgs) Field1DeepEqual(src *types.TUniqueId) bool {

	if !p.TaskId.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceGetExportStatusResult struct {
	Success *palointernalservice.TExportStatusResult_ `thrift:"success,0,optional" frugal:"0,optional,palointernalservice.TExportStatusResult_" json:"success,omitempty"`
}

func NewBackendServiceGetExportStatusResult() *BackendServiceGetExportStatusResult {
	return &BackendServiceGetExportStatusResult{}
}

func (p *BackendServiceGetExportStatusResult) InitDefault() {
	*p = BackendServiceGetExportStatusResult{}
}

var BackendServiceGetExportStatusResult_Success_DEFAULT *palointernalservice.TExportStatusResult_

func (p *BackendServiceGetExportStatusResult) GetSuccess() (v *palointernalservice.TExportStatusResult_) {
	if !p.IsSetSuccess() {
		return BackendServiceGetExportStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceGetExportStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*palointernalservice.TExportStatusResult_)
}

var fieldIDToName_BackendServiceGetExportStatusResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceGetExportStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceGetExportStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceGetExportStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceGetExportStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = palointernalservice.NewTExportStatusResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceGetExportStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("get_export_status_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceGetExportStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceGetExportStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceGetExportStatusResult(%+v)", *p)
}

func (p *BackendServiceGetExportStatusResult) DeepEqual(ano *BackendServiceGetExportStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceGetExportStatusResult) Field0DeepEqual(src *palointernalservice.TExportStatusResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceEraseExportTaskArgs struct {
	TaskId *types.TUniqueId `thrift:"task_id,1" frugal:"1,default,types.TUniqueId" json:"task_id"`
}

func NewBackendServiceEraseExportTaskArgs() *BackendServiceEraseExportTaskArgs {
	return &BackendServiceEraseExportTaskArgs{}
}

func (p *BackendServiceEraseExportTaskArgs) InitDefault() {
	*p = BackendServiceEraseExportTaskArgs{}
}

var BackendServiceEraseExportTaskArgs_TaskId_DEFAULT *types.TUniqueId

func (p *BackendServiceEraseExportTaskArgs) GetTaskId() (v *types.TUniqueId) {
	if !p.IsSetTaskId() {
		return BackendServiceEraseExportTaskArgs_TaskId_DEFAULT
	}
	return p.TaskId
}
func (p *BackendServiceEraseExportTaskArgs) SetTaskId(val *types.TUniqueId) {
	p.TaskId = val
}

var fieldIDToName_BackendServiceEraseExportTaskArgs = map[int16]string{
	1: "task_id",
}

func (p *BackendServiceEraseExportTaskArgs) IsSetTaskId() bool {
	return p.TaskId != nil
}

func (p *BackendServiceEraseExportTaskArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceEraseExportTaskArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceEraseExportTaskArgs) ReadField1(iprot thrift.TProtocol) error {
	p.TaskId = types.NewTUniqueId()
	if err := p.TaskId.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceEraseExportTaskArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("erase_export_task_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceEraseExportTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_id", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.TaskId.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BackendServiceEraseExportTaskArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceEraseExportTaskArgs(%+v)", *p)
}

func (p *BackendServiceEraseExportTaskArgs) DeepEqual(ano *BackendServiceEraseExportTaskArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskId) {
		return false
	}
	return true
}

func (p *BackendServiceEraseExportTaskArgs) Field1DeepEqual(src *types.TUniqueId) bool {

	if !p.TaskId.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceEraseExportTaskResult struct {
	Success *status.TStatus `thrift:"success,0,optional" frugal:"0,optional,status.TStatus" json:"success,omitempty"`
}

func NewBackendServiceEraseExportTaskResult() *BackendServiceEraseExportTaskResult {
	return &BackendServiceEraseExportTaskResult{}
}

func (p *BackendServiceEraseExportTaskResult) InitDefault() {
	*p = BackendServiceEraseExportTaskResult{}
}

var BackendServiceEraseExportTaskResult_Success_DEFAULT *status.TStatus

func (p *BackendServiceEraseExportTaskResult) GetSuccess() (v *status.TStatus) {
	if !p.IsSetSuccess() {
		return BackendServiceEraseExportTaskResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceEraseExportTaskResult) SetSuccess(x interface{}) {
	p.Success = x.(*status.TStatus)
}

var fieldIDToName_BackendServiceEraseExportTaskResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceEraseExportTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceEraseExportTaskResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceEraseExportTaskResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceEraseExportTaskResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = status.NewTStatus()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceEraseExportTaskResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("erase_export_task_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceEraseExportTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceEraseExportTaskResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceEraseExportTaskResult(%+v)", *p)
}

func (p *BackendServiceEraseExportTaskResult) DeepEqual(ano *BackendServiceEraseExportTaskResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceEraseExportTaskResult) Field0DeepEqual(src *status.TStatus) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceGetTabletStatArgs struct {
}

func NewBackendServiceGetTabletStatArgs() *BackendServiceGetTabletStatArgs {
	return &BackendServiceGetTabletStatArgs{}
}

func (p *BackendServiceGetTabletStatArgs) InitDefault() {
	*p = BackendServiceGetTabletStatArgs{}
}

var fieldIDToName_BackendServiceGetTabletStatArgs = map[int16]string{}

func (p *BackendServiceGetTabletStatArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceGetTabletStatArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("get_tablet_stat_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceGetTabletStatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceGetTabletStatArgs(%+v)", *p)
}

func (p *BackendServiceGetTabletStatArgs) DeepEqual(ano *BackendServiceGetTabletStatArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BackendServiceGetTabletStatResult struct {
	Success *TTabletStatResult_ `thrift:"success,0,optional" frugal:"0,optional,TTabletStatResult_" json:"success,omitempty"`
}

func NewBackendServiceGetTabletStatResult() *BackendServiceGetTabletStatResult {
	return &BackendServiceGetTabletStatResult{}
}

func (p *BackendServiceGetTabletStatResult) InitDefault() {
	*p = BackendServiceGetTabletStatResult{}
}

var BackendServiceGetTabletStatResult_Success_DEFAULT *TTabletStatResult_

func (p *BackendServiceGetTabletStatResult) GetSuccess() (v *TTabletStatResult_) {
	if !p.IsSetSuccess() {
		return BackendServiceGetTabletStatResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceGetTabletStatResult) SetSuccess(x interface{}) {
	p.Success = x.(*TTabletStatResult_)
}

var fieldIDToName_BackendServiceGetTabletStatResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceGetTabletStatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceGetTabletStatResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceGetTabletStatResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceGetTabletStatResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewTTabletStatResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceGetTabletStatResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("get_tablet_stat_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceGetTabletStatResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceGetTabletStatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceGetTabletStatResult(%+v)", *p)
}

func (p *BackendServiceGetTabletStatResult) DeepEqual(ano *BackendServiceGetTabletStatResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceGetTabletStatResult) Field0DeepEqual(src *TTabletStatResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceGetTrashUsedCapacityArgs struct {
}

func NewBackendServiceGetTrashUsedCapacityArgs() *BackendServiceGetTrashUsedCapacityArgs {
	return &BackendServiceGetTrashUsedCapacityArgs{}
}

func (p *BackendServiceGetTrashUsedCapacityArgs) InitDefault() {
	*p = BackendServiceGetTrashUsedCapacityArgs{}
}

var fieldIDToName_BackendServiceGetTrashUsedCapacityArgs = map[int16]string{}

func (p *BackendServiceGetTrashUsedCapacityArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceGetTrashUsedCapacityArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("get_trash_used_capacity_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceGetTrashUsedCapacityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceGetTrashUsedCapacityArgs(%+v)", *p)
}

func (p *BackendServiceGetTrashUsedCapacityArgs) DeepEqual(ano *BackendServiceGetTrashUsedCapacityArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BackendServiceGetTrashUsedCapacityResult struct {
	Success *int64 `thrift:"success,0,optional" frugal:"0,optional,i64" json:"success,omitempty"`
}

func NewBackendServiceGetTrashUsedCapacityResult() *BackendServiceGetTrashUsedCapacityResult {
	return &BackendServiceGetTrashUsedCapacityResult{}
}

func (p *BackendServiceGetTrashUsedCapacityResult) InitDefault() {
	*p = BackendServiceGetTrashUsedCapacityResult{}
}

var BackendServiceGetTrashUsedCapacityResult_Success_DEFAULT int64

func (p *BackendServiceGetTrashUsedCapacityResult) GetSuccess() (v int64) {
	if !p.IsSetSuccess() {
		return BackendServiceGetTrashUsedCapacityResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *BackendServiceGetTrashUsedCapacityResult) SetSuccess(x interface{}) {
	p.Success = x.(*int64)
}

var fieldIDToName_BackendServiceGetTrashUsedCapacityResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceGetTrashUsedCapacityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceGetTrashUsedCapacityResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceGetTrashUsedCapacityResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceGetTrashUsedCapacityResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BackendServiceGetTrashUsedCapacityResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("get_trash_used_capacity_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceGetTrashUsedCapacityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceGetTrashUsedCapacityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceGetTrashUsedCapacityResult(%+v)", *p)
}

func (p *BackendServiceGetTrashUsedCapacityResult) DeepEqual(ano *BackendServiceGetTrashUsedCapacityResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceGetTrashUsedCapacityResult) Field0DeepEqual(src *int64) bool {

	if p.Success == src {
		return true
	} else if p.Success == nil || src == nil {
		return false
	}
	if *p.Success != *src {
		return false
	}
	return true
}

type BackendServiceGetDiskTrashUsedCapacityArgs struct {
}

func NewBackendServiceGetDiskTrashUsedCapacityArgs() *BackendServiceGetDiskTrashUsedCapacityArgs {
	return &BackendServiceGetDiskTrashUsedCapacityArgs{}
}

func (p *BackendServiceGetDiskTrashUsedCapacityArgs) InitDefault() {
	*p = BackendServiceGetDiskTrashUsedCapacityArgs{}
}

var fieldIDToName_BackendServiceGetDiskTrashUsedCapacityArgs = map[int16]string{}

func (p *BackendServiceGetDiskTrashUsedCapacityArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceGetDiskTrashUsedCapacityArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("get_disk_trash_used_capacity_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceGetDiskTrashUsedCapacityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceGetDiskTrashUsedCapacityArgs(%+v)", *p)
}

func (p *BackendServiceGetDiskTrashUsedCapacityArgs) DeepEqual(ano *BackendServiceGetDiskTrashUsedCapacityArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BackendServiceGetDiskTrashUsedCapacityResult struct {
	Success []*TDiskTrashInfo `thrift:"success,0,optional" frugal:"0,optional,list<TDiskTrashInfo>" json:"success,omitempty"`
}

func NewBackendServiceGetDiskTrashUsedCapacityResult() *BackendServiceGetDiskTrashUsedCapacityResult {
	return &BackendServiceGetDiskTrashUsedCapacityResult{}
}

func (p *BackendServiceGetDiskTrashUsedCapacityResult) InitDefault() {
	*p = BackendServiceGetDiskTrashUsedCapacityResult{}
}

var BackendServiceGetDiskTrashUsedCapacityResult_Success_DEFAULT []*TDiskTrashInfo

func (p *BackendServiceGetDiskTrashUsedCapacityResult) GetSuccess() (v []*TDiskTrashInfo) {
	if !p.IsSetSuccess() {
		return BackendServiceGetDiskTrashUsedCapacityResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceGetDiskTrashUsedCapacityResult) SetSuccess(x interface{}) {
	p.Success = x.([]*TDiskTrashInfo)
}

var fieldIDToName_BackendServiceGetDiskTrashUsedCapacityResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceGetDiskTrashUsedCapacityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceGetDiskTrashUsedCapacityResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceGetDiskTrashUsedCapacityResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceGetDiskTrashUsedCapacityResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*TDiskTrashInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTDiskTrashInfo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceGetDiskTrashUsedCapacityResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("get_disk_trash_used_capacity_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceGetDiskTrashUsedCapacityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceGetDiskTrashUsedCapacityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceGetDiskTrashUsedCapacityResult(%+v)", *p)
}

func (p *BackendServiceGetDiskTrashUsedCapacityResult) DeepEqual(ano *BackendServiceGetDiskTrashUsedCapacityResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceGetDiskTrashUsedCapacityResult) Field0DeepEqual(src []*TDiskTrashInfo) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type BackendServiceSubmitRoutineLoadTaskArgs struct {
	Tasks []*TRoutineLoadTask `thrift:"tasks,1" frugal:"1,default,list<TRoutineLoadTask>" json:"tasks"`
}

func NewBackendServiceSubmitRoutineLoadTaskArgs() *BackendServiceSubmitRoutineLoadTaskArgs {
	return &BackendServiceSubmitRoutineLoadTaskArgs{}
}

func (p *BackendServiceSubmitRoutineLoadTaskArgs) InitDefault() {
	*p = BackendServiceSubmitRoutineLoadTaskArgs{}
}

func (p *BackendServiceSubmitRoutineLoadTaskArgs) GetTasks() (v []*TRoutineLoadTask) {
	return p.Tasks
}
func (p *BackendServiceSubmitRoutineLoadTaskArgs) SetTasks(val []*TRoutineLoadTask) {
	p.Tasks = val
}

var fieldIDToName_BackendServiceSubmitRoutineLoadTaskArgs = map[int16]string{
	1: "tasks",
}

func (p *BackendServiceSubmitRoutineLoadTaskArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceSubmitRoutineLoadTaskArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceSubmitRoutineLoadTaskArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Tasks = make([]*TRoutineLoadTask, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTRoutineLoadTask()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Tasks = append(p.Tasks, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceSubmitRoutineLoadTaskArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("submit_routine_load_task_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceSubmitRoutineLoadTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tasks", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tasks)); err != nil {
		return err
	}
	for _, v := range p.Tasks {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BackendServiceSubmitRoutineLoadTaskArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceSubmitRoutineLoadTaskArgs(%+v)", *p)
}

func (p *BackendServiceSubmitRoutineLoadTaskArgs) DeepEqual(ano *BackendServiceSubmitRoutineLoadTaskArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Tasks) {
		return false
	}
	return true
}

func (p *BackendServiceSubmitRoutineLoadTaskArgs) Field1DeepEqual(src []*TRoutineLoadTask) bool {

	if len(p.Tasks) != len(src) {
		return false
	}
	for i, v := range p.Tasks {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type BackendServiceSubmitRoutineLoadTaskResult struct {
	Success *status.TStatus `thrift:"success,0,optional" frugal:"0,optional,status.TStatus" json:"success,omitempty"`
}

func NewBackendServiceSubmitRoutineLoadTaskResult() *BackendServiceSubmitRoutineLoadTaskResult {
	return &BackendServiceSubmitRoutineLoadTaskResult{}
}

func (p *BackendServiceSubmitRoutineLoadTaskResult) InitDefault() {
	*p = BackendServiceSubmitRoutineLoadTaskResult{}
}

var BackendServiceSubmitRoutineLoadTaskResult_Success_DEFAULT *status.TStatus

func (p *BackendServiceSubmitRoutineLoadTaskResult) GetSuccess() (v *status.TStatus) {
	if !p.IsSetSuccess() {
		return BackendServiceSubmitRoutineLoadTaskResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceSubmitRoutineLoadTaskResult) SetSuccess(x interface{}) {
	p.Success = x.(*status.TStatus)
}

var fieldIDToName_BackendServiceSubmitRoutineLoadTaskResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceSubmitRoutineLoadTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceSubmitRoutineLoadTaskResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceSubmitRoutineLoadTaskResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceSubmitRoutineLoadTaskResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = status.NewTStatus()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceSubmitRoutineLoadTaskResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("submit_routine_load_task_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceSubmitRoutineLoadTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceSubmitRoutineLoadTaskResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceSubmitRoutineLoadTaskResult(%+v)", *p)
}

func (p *BackendServiceSubmitRoutineLoadTaskResult) DeepEqual(ano *BackendServiceSubmitRoutineLoadTaskResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceSubmitRoutineLoadTaskResult) Field0DeepEqual(src *status.TStatus) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceOpenScannerArgs struct {
	Params *dorisexternalservice.TScanOpenParams `thrift:"params,1" frugal:"1,default,dorisexternalservice.TScanOpenParams" json:"params"`
}

func NewBackendServiceOpenScannerArgs() *BackendServiceOpenScannerArgs {
	return &BackendServiceOpenScannerArgs{}
}

func (p *BackendServiceOpenScannerArgs) InitDefault() {
	*p = BackendServiceOpenScannerArgs{}
}

var BackendServiceOpenScannerArgs_Params_DEFAULT *dorisexternalservice.TScanOpenParams

func (p *BackendServiceOpenScannerArgs) GetParams() (v *dorisexternalservice.TScanOpenParams) {
	if !p.IsSetParams() {
		return BackendServiceOpenScannerArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *BackendServiceOpenScannerArgs) SetParams(val *dorisexternalservice.TScanOpenParams) {
	p.Params = val
}

var fieldIDToName_BackendServiceOpenScannerArgs = map[int16]string{
	1: "params",
}

func (p *BackendServiceOpenScannerArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *BackendServiceOpenScannerArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceOpenScannerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceOpenScannerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Params = dorisexternalservice.NewTScanOpenParams()
	if err := p.Params.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceOpenScannerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("open_scanner_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceOpenScannerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BackendServiceOpenScannerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceOpenScannerArgs(%+v)", *p)
}

func (p *BackendServiceOpenScannerArgs) DeepEqual(ano *BackendServiceOpenScannerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *BackendServiceOpenScannerArgs) Field1DeepEqual(src *dorisexternalservice.TScanOpenParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceOpenScannerResult struct {
	Success *dorisexternalservice.TScanOpenResult_ `thrift:"success,0,optional" frugal:"0,optional,dorisexternalservice.TScanOpenResult_" json:"success,omitempty"`
}

func NewBackendServiceOpenScannerResult() *BackendServiceOpenScannerResult {
	return &BackendServiceOpenScannerResult{}
}

func (p *BackendServiceOpenScannerResult) InitDefault() {
	*p = BackendServiceOpenScannerResult{}
}

var BackendServiceOpenScannerResult_Success_DEFAULT *dorisexternalservice.TScanOpenResult_

func (p *BackendServiceOpenScannerResult) GetSuccess() (v *dorisexternalservice.TScanOpenResult_) {
	if !p.IsSetSuccess() {
		return BackendServiceOpenScannerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceOpenScannerResult) SetSuccess(x interface{}) {
	p.Success = x.(*dorisexternalservice.TScanOpenResult_)
}

var fieldIDToName_BackendServiceOpenScannerResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceOpenScannerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceOpenScannerResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceOpenScannerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceOpenScannerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = dorisexternalservice.NewTScanOpenResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceOpenScannerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("open_scanner_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceOpenScannerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceOpenScannerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceOpenScannerResult(%+v)", *p)
}

func (p *BackendServiceOpenScannerResult) DeepEqual(ano *BackendServiceOpenScannerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceOpenScannerResult) Field0DeepEqual(src *dorisexternalservice.TScanOpenResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceGetNextArgs struct {
	Params *dorisexternalservice.TScanNextBatchParams `thrift:"params,1" frugal:"1,default,dorisexternalservice.TScanNextBatchParams" json:"params"`
}

func NewBackendServiceGetNextArgs() *BackendServiceGetNextArgs {
	return &BackendServiceGetNextArgs{}
}

func (p *BackendServiceGetNextArgs) InitDefault() {
	*p = BackendServiceGetNextArgs{}
}

var BackendServiceGetNextArgs_Params_DEFAULT *dorisexternalservice.TScanNextBatchParams

func (p *BackendServiceGetNextArgs) GetParams() (v *dorisexternalservice.TScanNextBatchParams) {
	if !p.IsSetParams() {
		return BackendServiceGetNextArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *BackendServiceGetNextArgs) SetParams(val *dorisexternalservice.TScanNextBatchParams) {
	p.Params = val
}

var fieldIDToName_BackendServiceGetNextArgs = map[int16]string{
	1: "params",
}

func (p *BackendServiceGetNextArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *BackendServiceGetNextArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceGetNextArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceGetNextArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Params = dorisexternalservice.NewTScanNextBatchParams()
	if err := p.Params.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceGetNextArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("get_next_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceGetNextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BackendServiceGetNextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceGetNextArgs(%+v)", *p)
}

func (p *BackendServiceGetNextArgs) DeepEqual(ano *BackendServiceGetNextArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *BackendServiceGetNextArgs) Field1DeepEqual(src *dorisexternalservice.TScanNextBatchParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceGetNextResult struct {
	Success *dorisexternalservice.TScanBatchResult_ `thrift:"success,0,optional" frugal:"0,optional,dorisexternalservice.TScanBatchResult_" json:"success,omitempty"`
}

func NewBackendServiceGetNextResult() *BackendServiceGetNextResult {
	return &BackendServiceGetNextResult{}
}

func (p *BackendServiceGetNextResult) InitDefault() {
	*p = BackendServiceGetNextResult{}
}

var BackendServiceGetNextResult_Success_DEFAULT *dorisexternalservice.TScanBatchResult_

func (p *BackendServiceGetNextResult) GetSuccess() (v *dorisexternalservice.TScanBatchResult_) {
	if !p.IsSetSuccess() {
		return BackendServiceGetNextResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceGetNextResult) SetSuccess(x interface{}) {
	p.Success = x.(*dorisexternalservice.TScanBatchResult_)
}

var fieldIDToName_BackendServiceGetNextResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceGetNextResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceGetNextResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceGetNextResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceGetNextResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = dorisexternalservice.NewTScanBatchResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceGetNextResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("get_next_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceGetNextResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceGetNextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceGetNextResult(%+v)", *p)
}

func (p *BackendServiceGetNextResult) DeepEqual(ano *BackendServiceGetNextResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceGetNextResult) Field0DeepEqual(src *dorisexternalservice.TScanBatchResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceCloseScannerArgs struct {
	Params *dorisexternalservice.TScanCloseParams `thrift:"params,1" frugal:"1,default,dorisexternalservice.TScanCloseParams" json:"params"`
}

func NewBackendServiceCloseScannerArgs() *BackendServiceCloseScannerArgs {
	return &BackendServiceCloseScannerArgs{}
}

func (p *BackendServiceCloseScannerArgs) InitDefault() {
	*p = BackendServiceCloseScannerArgs{}
}

var BackendServiceCloseScannerArgs_Params_DEFAULT *dorisexternalservice.TScanCloseParams

func (p *BackendServiceCloseScannerArgs) GetParams() (v *dorisexternalservice.TScanCloseParams) {
	if !p.IsSetParams() {
		return BackendServiceCloseScannerArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *BackendServiceCloseScannerArgs) SetParams(val *dorisexternalservice.TScanCloseParams) {
	p.Params = val
}

var fieldIDToName_BackendServiceCloseScannerArgs = map[int16]string{
	1: "params",
}

func (p *BackendServiceCloseScannerArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *BackendServiceCloseScannerArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceCloseScannerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceCloseScannerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Params = dorisexternalservice.NewTScanCloseParams()
	if err := p.Params.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceCloseScannerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("close_scanner_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceCloseScannerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Params.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BackendServiceCloseScannerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceCloseScannerArgs(%+v)", *p)
}

func (p *BackendServiceCloseScannerArgs) DeepEqual(ano *BackendServiceCloseScannerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Params) {
		return false
	}
	return true
}

func (p *BackendServiceCloseScannerArgs) Field1DeepEqual(src *dorisexternalservice.TScanCloseParams) bool {

	if !p.Params.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceCloseScannerResult struct {
	Success *dorisexternalservice.TScanCloseResult_ `thrift:"success,0,optional" frugal:"0,optional,dorisexternalservice.TScanCloseResult_" json:"success,omitempty"`
}

func NewBackendServiceCloseScannerResult() *BackendServiceCloseScannerResult {
	return &BackendServiceCloseScannerResult{}
}

func (p *BackendServiceCloseScannerResult) InitDefault() {
	*p = BackendServiceCloseScannerResult{}
}

var BackendServiceCloseScannerResult_Success_DEFAULT *dorisexternalservice.TScanCloseResult_

func (p *BackendServiceCloseScannerResult) GetSuccess() (v *dorisexternalservice.TScanCloseResult_) {
	if !p.IsSetSuccess() {
		return BackendServiceCloseScannerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceCloseScannerResult) SetSuccess(x interface{}) {
	p.Success = x.(*dorisexternalservice.TScanCloseResult_)
}

var fieldIDToName_BackendServiceCloseScannerResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceCloseScannerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceCloseScannerResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceCloseScannerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceCloseScannerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = dorisexternalservice.NewTScanCloseResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceCloseScannerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("close_scanner_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceCloseScannerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceCloseScannerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceCloseScannerResult(%+v)", *p)
}

func (p *BackendServiceCloseScannerResult) DeepEqual(ano *BackendServiceCloseScannerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceCloseScannerResult) Field0DeepEqual(src *dorisexternalservice.TScanCloseResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceGetStreamLoadRecordArgs struct {
	LastStreamRecordTime int64 `thrift:"last_stream_record_time,1" frugal:"1,default,i64" json:"last_stream_record_time"`
}

func NewBackendServiceGetStreamLoadRecordArgs() *BackendServiceGetStreamLoadRecordArgs {
	return &BackendServiceGetStreamLoadRecordArgs{}
}

func (p *BackendServiceGetStreamLoadRecordArgs) InitDefault() {
	*p = BackendServiceGetStreamLoadRecordArgs{}
}

func (p *BackendServiceGetStreamLoadRecordArgs) GetLastStreamRecordTime() (v int64) {
	return p.LastStreamRecordTime
}
func (p *BackendServiceGetStreamLoadRecordArgs) SetLastStreamRecordTime(val int64) {
	p.LastStreamRecordTime = val
}

var fieldIDToName_BackendServiceGetStreamLoadRecordArgs = map[int16]string{
	1: "last_stream_record_time",
}

func (p *BackendServiceGetStreamLoadRecordArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceGetStreamLoadRecordArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceGetStreamLoadRecordArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.LastStreamRecordTime = v
	}
	return nil
}

func (p *BackendServiceGetStreamLoadRecordArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("get_stream_load_record_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceGetStreamLoadRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("last_stream_record_time", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.LastStreamRecordTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BackendServiceGetStreamLoadRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceGetStreamLoadRecordArgs(%+v)", *p)
}

func (p *BackendServiceGetStreamLoadRecordArgs) DeepEqual(ano *BackendServiceGetStreamLoadRecordArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LastStreamRecordTime) {
		return false
	}
	return true
}

func (p *BackendServiceGetStreamLoadRecordArgs) Field1DeepEqual(src int64) bool {

	if p.LastStreamRecordTime != src {
		return false
	}
	return true
}

type BackendServiceGetStreamLoadRecordResult struct {
	Success *TStreamLoadRecordResult_ `thrift:"success,0,optional" frugal:"0,optional,TStreamLoadRecordResult_" json:"success,omitempty"`
}

func NewBackendServiceGetStreamLoadRecordResult() *BackendServiceGetStreamLoadRecordResult {
	return &BackendServiceGetStreamLoadRecordResult{}
}

func (p *BackendServiceGetStreamLoadRecordResult) InitDefault() {
	*p = BackendServiceGetStreamLoadRecordResult{}
}

var BackendServiceGetStreamLoadRecordResult_Success_DEFAULT *TStreamLoadRecordResult_

func (p *BackendServiceGetStreamLoadRecordResult) GetSuccess() (v *TStreamLoadRecordResult_) {
	if !p.IsSetSuccess() {
		return BackendServiceGetStreamLoadRecordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceGetStreamLoadRecordResult) SetSuccess(x interface{}) {
	p.Success = x.(*TStreamLoadRecordResult_)
}

var fieldIDToName_BackendServiceGetStreamLoadRecordResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceGetStreamLoadRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceGetStreamLoadRecordResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceGetStreamLoadRecordResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceGetStreamLoadRecordResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewTStreamLoadRecordResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceGetStreamLoadRecordResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("get_stream_load_record_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceGetStreamLoadRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceGetStreamLoadRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceGetStreamLoadRecordResult(%+v)", *p)
}

func (p *BackendServiceGetStreamLoadRecordResult) DeepEqual(ano *BackendServiceGetStreamLoadRecordResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceGetStreamLoadRecordResult) Field0DeepEqual(src *TStreamLoadRecordResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceCleanTrashArgs struct {
}

func NewBackendServiceCleanTrashArgs() *BackendServiceCleanTrashArgs {
	return &BackendServiceCleanTrashArgs{}
}

func (p *BackendServiceCleanTrashArgs) InitDefault() {
	*p = BackendServiceCleanTrashArgs{}
}

var fieldIDToName_BackendServiceCleanTrashArgs = map[int16]string{}

func (p *BackendServiceCleanTrashArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceCleanTrashArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("clean_trash_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceCleanTrashArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceCleanTrashArgs(%+v)", *p)
}

func (p *BackendServiceCleanTrashArgs) DeepEqual(ano *BackendServiceCleanTrashArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BackendServiceCheckStorageFormatArgs struct {
}

func NewBackendServiceCheckStorageFormatArgs() *BackendServiceCheckStorageFormatArgs {
	return &BackendServiceCheckStorageFormatArgs{}
}

func (p *BackendServiceCheckStorageFormatArgs) InitDefault() {
	*p = BackendServiceCheckStorageFormatArgs{}
}

var fieldIDToName_BackendServiceCheckStorageFormatArgs = map[int16]string{}

func (p *BackendServiceCheckStorageFormatArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceCheckStorageFormatArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("check_storage_format_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceCheckStorageFormatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceCheckStorageFormatArgs(%+v)", *p)
}

func (p *BackendServiceCheckStorageFormatArgs) DeepEqual(ano *BackendServiceCheckStorageFormatArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BackendServiceCheckStorageFormatResult struct {
	Success *TCheckStorageFormatResult_ `thrift:"success,0,optional" frugal:"0,optional,TCheckStorageFormatResult_" json:"success,omitempty"`
}

func NewBackendServiceCheckStorageFormatResult() *BackendServiceCheckStorageFormatResult {
	return &BackendServiceCheckStorageFormatResult{}
}

func (p *BackendServiceCheckStorageFormatResult) InitDefault() {
	*p = BackendServiceCheckStorageFormatResult{}
}

var BackendServiceCheckStorageFormatResult_Success_DEFAULT *TCheckStorageFormatResult_

func (p *BackendServiceCheckStorageFormatResult) GetSuccess() (v *TCheckStorageFormatResult_) {
	if !p.IsSetSuccess() {
		return BackendServiceCheckStorageFormatResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceCheckStorageFormatResult) SetSuccess(x interface{}) {
	p.Success = x.(*TCheckStorageFormatResult_)
}

var fieldIDToName_BackendServiceCheckStorageFormatResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceCheckStorageFormatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceCheckStorageFormatResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceCheckStorageFormatResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceCheckStorageFormatResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewTCheckStorageFormatResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceCheckStorageFormatResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("check_storage_format_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceCheckStorageFormatResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceCheckStorageFormatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceCheckStorageFormatResult(%+v)", *p)
}

func (p *BackendServiceCheckStorageFormatResult) DeepEqual(ano *BackendServiceCheckStorageFormatResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceCheckStorageFormatResult) Field0DeepEqual(src *TCheckStorageFormatResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceIngestBinlogArgs struct {
	IngestBinlogRequest *TIngestBinlogRequest `thrift:"ingest_binlog_request,1" frugal:"1,default,TIngestBinlogRequest" json:"ingest_binlog_request"`
}

func NewBackendServiceIngestBinlogArgs() *BackendServiceIngestBinlogArgs {
	return &BackendServiceIngestBinlogArgs{}
}

func (p *BackendServiceIngestBinlogArgs) InitDefault() {
	*p = BackendServiceIngestBinlogArgs{}
}

var BackendServiceIngestBinlogArgs_IngestBinlogRequest_DEFAULT *TIngestBinlogRequest

func (p *BackendServiceIngestBinlogArgs) GetIngestBinlogRequest() (v *TIngestBinlogRequest) {
	if !p.IsSetIngestBinlogRequest() {
		return BackendServiceIngestBinlogArgs_IngestBinlogRequest_DEFAULT
	}
	return p.IngestBinlogRequest
}
func (p *BackendServiceIngestBinlogArgs) SetIngestBinlogRequest(val *TIngestBinlogRequest) {
	p.IngestBinlogRequest = val
}

var fieldIDToName_BackendServiceIngestBinlogArgs = map[int16]string{
	1: "ingest_binlog_request",
}

func (p *BackendServiceIngestBinlogArgs) IsSetIngestBinlogRequest() bool {
	return p.IngestBinlogRequest != nil
}

func (p *BackendServiceIngestBinlogArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceIngestBinlogArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceIngestBinlogArgs) ReadField1(iprot thrift.TProtocol) error {
	p.IngestBinlogRequest = NewTIngestBinlogRequest()
	if err := p.IngestBinlogRequest.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceIngestBinlogArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ingest_binlog_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceIngestBinlogArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ingest_binlog_request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.IngestBinlogRequest.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BackendServiceIngestBinlogArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceIngestBinlogArgs(%+v)", *p)
}

func (p *BackendServiceIngestBinlogArgs) DeepEqual(ano *BackendServiceIngestBinlogArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IngestBinlogRequest) {
		return false
	}
	return true
}

func (p *BackendServiceIngestBinlogArgs) Field1DeepEqual(src *TIngestBinlogRequest) bool {

	if !p.IngestBinlogRequest.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceIngestBinlogResult struct {
	Success *TIngestBinlogResult_ `thrift:"success,0,optional" frugal:"0,optional,TIngestBinlogResult_" json:"success,omitempty"`
}

func NewBackendServiceIngestBinlogResult() *BackendServiceIngestBinlogResult {
	return &BackendServiceIngestBinlogResult{}
}

func (p *BackendServiceIngestBinlogResult) InitDefault() {
	*p = BackendServiceIngestBinlogResult{}
}

var BackendServiceIngestBinlogResult_Success_DEFAULT *TIngestBinlogResult_

func (p *BackendServiceIngestBinlogResult) GetSuccess() (v *TIngestBinlogResult_) {
	if !p.IsSetSuccess() {
		return BackendServiceIngestBinlogResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceIngestBinlogResult) SetSuccess(x interface{}) {
	p.Success = x.(*TIngestBinlogResult_)
}

var fieldIDToName_BackendServiceIngestBinlogResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceIngestBinlogResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceIngestBinlogResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceIngestBinlogResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceIngestBinlogResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewTIngestBinlogResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceIngestBinlogResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ingest_binlog_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceIngestBinlogResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceIngestBinlogResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceIngestBinlogResult(%+v)", *p)
}

func (p *BackendServiceIngestBinlogResult) DeepEqual(ano *BackendServiceIngestBinlogResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceIngestBinlogResult) Field0DeepEqual(src *TIngestBinlogResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceQueryIngestBinlogArgs struct {
	QueryIngestBinlogRequest *TQueryIngestBinlogRequest `thrift:"query_ingest_binlog_request,1" frugal:"1,default,TQueryIngestBinlogRequest" json:"query_ingest_binlog_request"`
}

func NewBackendServiceQueryIngestBinlogArgs() *BackendServiceQueryIngestBinlogArgs {
	return &BackendServiceQueryIngestBinlogArgs{}
}

func (p *BackendServiceQueryIngestBinlogArgs) InitDefault() {
	*p = BackendServiceQueryIngestBinlogArgs{}
}

var BackendServiceQueryIngestBinlogArgs_QueryIngestBinlogRequest_DEFAULT *TQueryIngestBinlogRequest

func (p *BackendServiceQueryIngestBinlogArgs) GetQueryIngestBinlogRequest() (v *TQueryIngestBinlogRequest) {
	if !p.IsSetQueryIngestBinlogRequest() {
		return BackendServiceQueryIngestBinlogArgs_QueryIngestBinlogRequest_DEFAULT
	}
	return p.QueryIngestBinlogRequest
}
func (p *BackendServiceQueryIngestBinlogArgs) SetQueryIngestBinlogRequest(val *TQueryIngestBinlogRequest) {
	p.QueryIngestBinlogRequest = val
}

var fieldIDToName_BackendServiceQueryIngestBinlogArgs = map[int16]string{
	1: "query_ingest_binlog_request",
}

func (p *BackendServiceQueryIngestBinlogArgs) IsSetQueryIngestBinlogRequest() bool {
	return p.QueryIngestBinlogRequest != nil
}

func (p *BackendServiceQueryIngestBinlogArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceQueryIngestBinlogArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceQueryIngestBinlogArgs) ReadField1(iprot thrift.TProtocol) error {
	p.QueryIngestBinlogRequest = NewTQueryIngestBinlogRequest()
	if err := p.QueryIngestBinlogRequest.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceQueryIngestBinlogArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("query_ingest_binlog_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceQueryIngestBinlogArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("query_ingest_binlog_request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.QueryIngestBinlogRequest.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BackendServiceQueryIngestBinlogArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceQueryIngestBinlogArgs(%+v)", *p)
}

func (p *BackendServiceQueryIngestBinlogArgs) DeepEqual(ano *BackendServiceQueryIngestBinlogArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.QueryIngestBinlogRequest) {
		return false
	}
	return true
}

func (p *BackendServiceQueryIngestBinlogArgs) Field1DeepEqual(src *TQueryIngestBinlogRequest) bool {

	if !p.QueryIngestBinlogRequest.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServiceQueryIngestBinlogResult struct {
	Success *TQueryIngestBinlogResult_ `thrift:"success,0,optional" frugal:"0,optional,TQueryIngestBinlogResult_" json:"success,omitempty"`
}

func NewBackendServiceQueryIngestBinlogResult() *BackendServiceQueryIngestBinlogResult {
	return &BackendServiceQueryIngestBinlogResult{}
}

func (p *BackendServiceQueryIngestBinlogResult) InitDefault() {
	*p = BackendServiceQueryIngestBinlogResult{}
}

var BackendServiceQueryIngestBinlogResult_Success_DEFAULT *TQueryIngestBinlogResult_

func (p *BackendServiceQueryIngestBinlogResult) GetSuccess() (v *TQueryIngestBinlogResult_) {
	if !p.IsSetSuccess() {
		return BackendServiceQueryIngestBinlogResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServiceQueryIngestBinlogResult) SetSuccess(x interface{}) {
	p.Success = x.(*TQueryIngestBinlogResult_)
}

var fieldIDToName_BackendServiceQueryIngestBinlogResult = map[int16]string{
	0: "success",
}

func (p *BackendServiceQueryIngestBinlogResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServiceQueryIngestBinlogResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServiceQueryIngestBinlogResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServiceQueryIngestBinlogResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewTQueryIngestBinlogResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServiceQueryIngestBinlogResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("query_ingest_binlog_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServiceQueryIngestBinlogResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServiceQueryIngestBinlogResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServiceQueryIngestBinlogResult(%+v)", *p)
}

func (p *BackendServiceQueryIngestBinlogResult) DeepEqual(ano *BackendServiceQueryIngestBinlogResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServiceQueryIngestBinlogResult) Field0DeepEqual(src *TQueryIngestBinlogResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServicePublishTopicInfoArgs struct {
	TopicRequest *TPublishTopicRequest `thrift:"topic_request,1" frugal:"1,default,TPublishTopicRequest" json:"topic_request"`
}

func NewBackendServicePublishTopicInfoArgs() *BackendServicePublishTopicInfoArgs {
	return &BackendServicePublishTopicInfoArgs{}
}

func (p *BackendServicePublishTopicInfoArgs) InitDefault() {
	*p = BackendServicePublishTopicInfoArgs{}
}

var BackendServicePublishTopicInfoArgs_TopicRequest_DEFAULT *TPublishTopicRequest

func (p *BackendServicePublishTopicInfoArgs) GetTopicRequest() (v *TPublishTopicRequest) {
	if !p.IsSetTopicRequest() {
		return BackendServicePublishTopicInfoArgs_TopicRequest_DEFAULT
	}
	return p.TopicRequest
}
func (p *BackendServicePublishTopicInfoArgs) SetTopicRequest(val *TPublishTopicRequest) {
	p.TopicRequest = val
}

var fieldIDToName_BackendServicePublishTopicInfoArgs = map[int16]string{
	1: "topic_request",
}

func (p *BackendServicePublishTopicInfoArgs) IsSetTopicRequest() bool {
	return p.TopicRequest != nil
}

func (p *BackendServicePublishTopicInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServicePublishTopicInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServicePublishTopicInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.TopicRequest = NewTPublishTopicRequest()
	if err := p.TopicRequest.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServicePublishTopicInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("publish_topic_info_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServicePublishTopicInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("topic_request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.TopicRequest.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BackendServicePublishTopicInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServicePublishTopicInfoArgs(%+v)", *p)
}

func (p *BackendServicePublishTopicInfoArgs) DeepEqual(ano *BackendServicePublishTopicInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TopicRequest) {
		return false
	}
	return true
}

func (p *BackendServicePublishTopicInfoArgs) Field1DeepEqual(src *TPublishTopicRequest) bool {

	if !p.TopicRequest.DeepEqual(src) {
		return false
	}
	return true
}

type BackendServicePublishTopicInfoResult struct {
	Success *TPublishTopicResult_ `thrift:"success,0,optional" frugal:"0,optional,TPublishTopicResult_" json:"success,omitempty"`
}

func NewBackendServicePublishTopicInfoResult() *BackendServicePublishTopicInfoResult {
	return &BackendServicePublishTopicInfoResult{}
}

func (p *BackendServicePublishTopicInfoResult) InitDefault() {
	*p = BackendServicePublishTopicInfoResult{}
}

var BackendServicePublishTopicInfoResult_Success_DEFAULT *TPublishTopicResult_

func (p *BackendServicePublishTopicInfoResult) GetSuccess() (v *TPublishTopicResult_) {
	if !p.IsSetSuccess() {
		return BackendServicePublishTopicInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BackendServicePublishTopicInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*TPublishTopicResult_)
}

var fieldIDToName_BackendServicePublishTopicInfoResult = map[int16]string{
	0: "success",
}

func (p *BackendServicePublishTopicInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BackendServicePublishTopicInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BackendServicePublishTopicInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BackendServicePublishTopicInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewTPublishTopicResult_()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BackendServicePublishTopicInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("publish_topic_info_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BackendServicePublishTopicInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BackendServicePublishTopicInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BackendServicePublishTopicInfoResult(%+v)", *p)
}

func (p *BackendServicePublishTopicInfoResult) DeepEqual(ano *BackendServicePublishTopicInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BackendServicePublishTopicInfoResult) Field0DeepEqual(src *TPublishTopicResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
