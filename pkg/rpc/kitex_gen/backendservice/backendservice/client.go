// Code generated by Kitex v0.4.4. DO NOT EDIT.

package backendservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	agentservice "github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/agentservice"
	backendservice "github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/backendservice"
	dorisexternalservice "github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/dorisexternalservice"
	palointernalservice "github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/palointernalservice"
	status "github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/status"
	types "github.com/selectdb/ccr_syncer/pkg/rpc/kitex_gen/types"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	ExecPlanFragment(ctx context.Context, params *palointernalservice.TExecPlanFragmentParams, callOptions ...callopt.Option) (r *palointernalservice.TExecPlanFragmentResult_, err error)
	CancelPlanFragment(ctx context.Context, params *palointernalservice.TCancelPlanFragmentParams, callOptions ...callopt.Option) (r *palointernalservice.TCancelPlanFragmentResult_, err error)
	TransmitData(ctx context.Context, params *palointernalservice.TTransmitDataParams, callOptions ...callopt.Option) (r *palointernalservice.TTransmitDataResult_, err error)
	SubmitTasks(ctx context.Context, tasks []*agentservice.TAgentTaskRequest, callOptions ...callopt.Option) (r *agentservice.TAgentResult_, err error)
	MakeSnapshot(ctx context.Context, snapshotRequest *agentservice.TSnapshotRequest, callOptions ...callopt.Option) (r *agentservice.TAgentResult_, err error)
	ReleaseSnapshot(ctx context.Context, snapshotPath string, callOptions ...callopt.Option) (r *agentservice.TAgentResult_, err error)
	PublishClusterState(ctx context.Context, request *agentservice.TAgentPublishRequest, callOptions ...callopt.Option) (r *agentservice.TAgentResult_, err error)
	SubmitExportTask(ctx context.Context, request *backendservice.TExportTaskRequest, callOptions ...callopt.Option) (r *status.TStatus, err error)
	GetExportStatus(ctx context.Context, taskId *types.TUniqueId, callOptions ...callopt.Option) (r *palointernalservice.TExportStatusResult_, err error)
	EraseExportTask(ctx context.Context, taskId *types.TUniqueId, callOptions ...callopt.Option) (r *status.TStatus, err error)
	GetTabletStat(ctx context.Context, callOptions ...callopt.Option) (r *backendservice.TTabletStatResult_, err error)
	GetTrashUsedCapacity(ctx context.Context, callOptions ...callopt.Option) (r int64, err error)
	GetDiskTrashUsedCapacity(ctx context.Context, callOptions ...callopt.Option) (r []*backendservice.TDiskTrashInfo, err error)
	SubmitRoutineLoadTask(ctx context.Context, tasks []*backendservice.TRoutineLoadTask, callOptions ...callopt.Option) (r *status.TStatus, err error)
	OpenScanner(ctx context.Context, params *dorisexternalservice.TScanOpenParams, callOptions ...callopt.Option) (r *dorisexternalservice.TScanOpenResult_, err error)
	GetNext(ctx context.Context, params *dorisexternalservice.TScanNextBatchParams, callOptions ...callopt.Option) (r *dorisexternalservice.TScanBatchResult_, err error)
	CloseScanner(ctx context.Context, params *dorisexternalservice.TScanCloseParams, callOptions ...callopt.Option) (r *dorisexternalservice.TScanCloseResult_, err error)
	GetStreamLoadRecord(ctx context.Context, lastStreamRecordTime int64, callOptions ...callopt.Option) (r *backendservice.TStreamLoadRecordResult_, err error)
	CleanTrash(ctx context.Context, callOptions ...callopt.Option) (err error)
	CheckStorageFormat(ctx context.Context, callOptions ...callopt.Option) (r *backendservice.TCheckStorageFormatResult_, err error)
	IngestBinlog(ctx context.Context, ingestBinlogRequest *backendservice.TIngestBinlogRequest, callOptions ...callopt.Option) (r *backendservice.TIngestBinlogResult_, err error)
	QueryIngestBinlog(ctx context.Context, queryIngestBinlogRequest *backendservice.TQueryIngestBinlogRequest, callOptions ...callopt.Option) (r *backendservice.TQueryIngestBinlogResult_, err error)
	PublishTopicInfo(ctx context.Context, topicRequest *backendservice.TPublishTopicRequest, callOptions ...callopt.Option) (r *backendservice.TPublishTopicResult_, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kBackendServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kBackendServiceClient struct {
	*kClient
}

func (p *kBackendServiceClient) ExecPlanFragment(ctx context.Context, params *palointernalservice.TExecPlanFragmentParams, callOptions ...callopt.Option) (r *palointernalservice.TExecPlanFragmentResult_, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ExecPlanFragment(ctx, params)
}

func (p *kBackendServiceClient) CancelPlanFragment(ctx context.Context, params *palointernalservice.TCancelPlanFragmentParams, callOptions ...callopt.Option) (r *palointernalservice.TCancelPlanFragmentResult_, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CancelPlanFragment(ctx, params)
}

func (p *kBackendServiceClient) TransmitData(ctx context.Context, params *palointernalservice.TTransmitDataParams, callOptions ...callopt.Option) (r *palointernalservice.TTransmitDataResult_, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TransmitData(ctx, params)
}

func (p *kBackendServiceClient) SubmitTasks(ctx context.Context, tasks []*agentservice.TAgentTaskRequest, callOptions ...callopt.Option) (r *agentservice.TAgentResult_, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SubmitTasks(ctx, tasks)
}

func (p *kBackendServiceClient) MakeSnapshot(ctx context.Context, snapshotRequest *agentservice.TSnapshotRequest, callOptions ...callopt.Option) (r *agentservice.TAgentResult_, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MakeSnapshot(ctx, snapshotRequest)
}

func (p *kBackendServiceClient) ReleaseSnapshot(ctx context.Context, snapshotPath string, callOptions ...callopt.Option) (r *agentservice.TAgentResult_, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ReleaseSnapshot(ctx, snapshotPath)
}

func (p *kBackendServiceClient) PublishClusterState(ctx context.Context, request *agentservice.TAgentPublishRequest, callOptions ...callopt.Option) (r *agentservice.TAgentResult_, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishClusterState(ctx, request)
}

func (p *kBackendServiceClient) SubmitExportTask(ctx context.Context, request *backendservice.TExportTaskRequest, callOptions ...callopt.Option) (r *status.TStatus, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SubmitExportTask(ctx, request)
}

func (p *kBackendServiceClient) GetExportStatus(ctx context.Context, taskId *types.TUniqueId, callOptions ...callopt.Option) (r *palointernalservice.TExportStatusResult_, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetExportStatus(ctx, taskId)
}

func (p *kBackendServiceClient) EraseExportTask(ctx context.Context, taskId *types.TUniqueId, callOptions ...callopt.Option) (r *status.TStatus, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.EraseExportTask(ctx, taskId)
}

func (p *kBackendServiceClient) GetTabletStat(ctx context.Context, callOptions ...callopt.Option) (r *backendservice.TTabletStatResult_, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTabletStat(ctx)
}

func (p *kBackendServiceClient) GetTrashUsedCapacity(ctx context.Context, callOptions ...callopt.Option) (r int64, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTrashUsedCapacity(ctx)
}

func (p *kBackendServiceClient) GetDiskTrashUsedCapacity(ctx context.Context, callOptions ...callopt.Option) (r []*backendservice.TDiskTrashInfo, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetDiskTrashUsedCapacity(ctx)
}

func (p *kBackendServiceClient) SubmitRoutineLoadTask(ctx context.Context, tasks []*backendservice.TRoutineLoadTask, callOptions ...callopt.Option) (r *status.TStatus, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SubmitRoutineLoadTask(ctx, tasks)
}

func (p *kBackendServiceClient) OpenScanner(ctx context.Context, params *dorisexternalservice.TScanOpenParams, callOptions ...callopt.Option) (r *dorisexternalservice.TScanOpenResult_, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.OpenScanner(ctx, params)
}

func (p *kBackendServiceClient) GetNext(ctx context.Context, params *dorisexternalservice.TScanNextBatchParams, callOptions ...callopt.Option) (r *dorisexternalservice.TScanBatchResult_, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetNext(ctx, params)
}

func (p *kBackendServiceClient) CloseScanner(ctx context.Context, params *dorisexternalservice.TScanCloseParams, callOptions ...callopt.Option) (r *dorisexternalservice.TScanCloseResult_, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CloseScanner(ctx, params)
}

func (p *kBackendServiceClient) GetStreamLoadRecord(ctx context.Context, lastStreamRecordTime int64, callOptions ...callopt.Option) (r *backendservice.TStreamLoadRecordResult_, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetStreamLoadRecord(ctx, lastStreamRecordTime)
}

func (p *kBackendServiceClient) CleanTrash(ctx context.Context, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CleanTrash(ctx)
}

func (p *kBackendServiceClient) CheckStorageFormat(ctx context.Context, callOptions ...callopt.Option) (r *backendservice.TCheckStorageFormatResult_, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckStorageFormat(ctx)
}

func (p *kBackendServiceClient) IngestBinlog(ctx context.Context, ingestBinlogRequest *backendservice.TIngestBinlogRequest, callOptions ...callopt.Option) (r *backendservice.TIngestBinlogResult_, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IngestBinlog(ctx, ingestBinlogRequest)
}

func (p *kBackendServiceClient) QueryIngestBinlog(ctx context.Context, queryIngestBinlogRequest *backendservice.TQueryIngestBinlogRequest, callOptions ...callopt.Option) (r *backendservice.TQueryIngestBinlogResult_, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryIngestBinlog(ctx, queryIngestBinlogRequest)
}

func (p *kBackendServiceClient) PublishTopicInfo(ctx context.Context, topicRequest *backendservice.TPublishTopicRequest, callOptions ...callopt.Option) (r *backendservice.TPublishTopicResult_, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishTopicInfo(ctx, topicRequest)
}
